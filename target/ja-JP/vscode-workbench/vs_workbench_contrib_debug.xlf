<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="src/vs/workbench/contrib/debug/common/debug" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="internalConsoleOptions">
        <source xml:lang="en">Controls when the internal debug console should open.</source>
        <target state="translated">いつ内部デバッグ コンソールを開くかを制御します。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/callStackEditorContribution" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="topStackFrameLineHighlight">
        <source xml:lang="en">Background color for the highlight of line at the top stack frame position.</source>
        <target state="translated">上位のスタック フレーム位置の行を強調表示する背景色。</target>
      </trans-unit>
      <trans-unit id="focusedStackFrameLineHighlight">
        <source xml:lang="en">Background color for the highlight of line at focused stack frame position.</source>
        <target state="translated">フォーカスされたスタック フレーム位置の行を強調表示する背景色。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugViewlet" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="startAdditionalSession">
        <source xml:lang="en">Start Additional Session</source>
        <target state="translated">追加のセッションを開始</target>
      </trans-unit>
      <trans-unit id="toggleDebugPanel">
        <source xml:lang="en">Debug Console</source>
        <target state="translated">デバッグ コンソール</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugEditorContribution" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="addConfiguration">
        <source xml:lang="en">Add Configuration...</source>
        <target state="translated">構成の追加...</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/breakpointEditorContribution" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="logPoint">
        <source xml:lang="en">Logpoint</source>
        <target state="translated">ログポイント</target>
      </trans-unit>
      <trans-unit id="breakpoint">
        <source xml:lang="en">Breakpoint</source>
        <target state="translated">ブレークポイント</target>
      </trans-unit>
      <trans-unit id="breakpointHasConditionDisabled">
        <source xml:lang="en">This {0} has a {1} that will get lost on remove. Consider enabling the {0} instead.</source>
        <target state="translated">この {0} には削除時に失われる {1} があります。代わりに {0} を有効にすることを検討してください。</target>
      </trans-unit>
      <trans-unit id="message">
        <source xml:lang="en">message</source>
        <target state="translated">メッセージ</target>
      </trans-unit>
      <trans-unit id="condition">
        <source xml:lang="en">condition</source>
        <target state="translated">条件</target>
      </trans-unit>
      <trans-unit id="breakpointHasConditionEnabled">
        <source xml:lang="en">This {0} has a {1} that will get lost on remove. Consider disabling the {0} instead.</source>
        <target state="translated">この {0} には削除時に失われる {1} があります。代わりに {0} を無効にすることを検討してください。</target>
      </trans-unit>
      <trans-unit id="removeLogPoint">
        <source xml:lang="en">Remove {0}</source>
        <target state="translated">{0} の削除</target>
      </trans-unit>
      <trans-unit id="disableLogPoint">
        <source xml:lang="en">{0} {1}</source>
        <target state="translated">{0} {1}</target>
      </trans-unit>
      <trans-unit id="disable">
        <source xml:lang="en">Disable</source>
        <target state="translated">無効にする</target>
      </trans-unit>
      <trans-unit id="enable">
        <source xml:lang="en">Enable</source>
        <target state="translated">有効にする</target>
      </trans-unit>
      <trans-unit id="cancel">
        <source xml:lang="en">Cancel</source>
        <target state="translated">キャンセル</target>
      </trans-unit>
      <trans-unit id="removeBreakpoint">
        <source xml:lang="en">Remove {0}</source>
        <target state="translated">{0} の削除</target>
      </trans-unit>
      <trans-unit id="editBreakpoint">
        <source xml:lang="en">Edit {0}...</source>
        <target state="translated">{0} を編集...</target>
      </trans-unit>
      <trans-unit id="disableBreakpoint">
        <source xml:lang="en">Disable {0}</source>
        <target state="translated">{0} を無効にする</target>
      </trans-unit>
      <trans-unit id="enableBreakpoint">
        <source xml:lang="en">Enable {0}</source>
        <target state="translated">{0} を有効にする</target>
      </trans-unit>
      <trans-unit id="removeBreakpoints">
        <source xml:lang="en">Remove Breakpoints</source>
        <target state="translated">ブレークポイントの削除</target>
      </trans-unit>
      <trans-unit id="removeInlineBreakpointOnColumn">
        <source xml:lang="en">Remove Inline Breakpoint on Column {0}</source>
        <target state="translated">列 {0} のインライン ブレークポイントを削除</target>
      </trans-unit>
      <trans-unit id="removeLineBreakpoint">
        <source xml:lang="en">Remove Line Breakpoint</source>
        <target state="translated">行のブレークポイントの削除</target>
      </trans-unit>
      <trans-unit id="editBreakpoints">
        <source xml:lang="en">Edit Breakpoints</source>
        <target state="translated">ブレークポイントの編集</target>
      </trans-unit>
      <trans-unit id="editInlineBreakpointOnColumn">
        <source xml:lang="en">Edit Inline Breakpoint on Column {0}</source>
        <target state="translated">列 {0} のインライン ブレークポイントを編集</target>
      </trans-unit>
      <trans-unit id="editLineBrekapoint">
        <source xml:lang="en">Edit Line Breakpoint</source>
        <target state="translated">行のブレークポイントの編集</target>
      </trans-unit>
      <trans-unit id="enableDisableBreakpoints">
        <source xml:lang="en">Enable/Disable Breakpoints</source>
        <target state="translated">ブレークポイントの有効化/無効化</target>
      </trans-unit>
      <trans-unit id="disableInlineColumnBreakpoint">
        <source xml:lang="en">Disable Inline Breakpoint on Column {0}</source>
        <target state="translated">列 {0} のインライン ブレークポイントを無効化</target>
      </trans-unit>
      <trans-unit id="disableBreakpointOnLine">
        <source xml:lang="en">Disable Line Breakpoint</source>
        <target state="translated">行のブレークポイントの無効化</target>
      </trans-unit>
      <trans-unit id="enableBreakpoints">
        <source xml:lang="en">Enable Inline Breakpoint on Column {0}</source>
        <target state="translated">列 {0} のインライン ブレークポイントを有効化</target>
      </trans-unit>
      <trans-unit id="enableBreakpointOnLine">
        <source xml:lang="en">Enable Line Breakpoint</source>
        <target state="translated">行のブレークポイントの有効化</target>
      </trans-unit>
      <trans-unit id="addBreakpoint">
        <source xml:lang="en">Add Breakpoint</source>
        <target state="translated">ブレークポイントの追加</target>
      </trans-unit>
      <trans-unit id="addConditionalBreakpoint">
        <source xml:lang="en">Add Conditional Breakpoint...</source>
        <target state="translated">条件付きブレークポイントの追加...</target>
      </trans-unit>
      <trans-unit id="addLogPoint">
        <source xml:lang="en">Add Logpoint...</source>
        <target state="translated">ログポイントを追加...</target>
      </trans-unit>
      <trans-unit id="debugIcon.breakpointForeground">
        <source xml:lang="en">Icon color for breakpoints.</source>
        <target state="translated">ブレークポイントのアイコンの色。</target>
      </trans-unit>
      <trans-unit id="debugIcon.breakpointDisabledForeground">
        <source xml:lang="en">Icon color for disabled breakpoints.</source>
        <target state="translated">無効なブレークポイントのアイコン色。</target>
      </trans-unit>
      <trans-unit id="debugIcon.breakpointUnverifiedForeground">
        <source xml:lang="en">Icon color for unverified breakpoints.</source>
        <target state="translated">未確認のブレークポイントのアイコン色。</target>
      </trans-unit>
      <trans-unit id="debugIcon.breakpointCurrentStackframeForeground">
        <source xml:lang="en">Icon color for the current breakpoint stack frame.</source>
        <target state="translated">現在のブレークポイント スタック フレームのアイコン色。</target>
      </trans-unit>
      <trans-unit id="debugIcon.breakpointStackframeForeground">
        <source xml:lang="en">Icon color for all breakpoint stack frames.</source>
        <target state="translated">すべてのブレークポイント スタック フレームのアイコン色。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debug.contribution" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="toggleDebugViewlet">
        <source xml:lang="en">Show Run and Debug</source>
        <target state="translated">実行とデバッグの表示</target>
      </trans-unit>
      <trans-unit id="run">
        <source xml:lang="en">Run</source>
        <target state="translated">実行</target>
      </trans-unit>
      <trans-unit id="debugPanel">
        <source xml:lang="en">Debug Console</source>
        <target state="translated">デバッグ コンソール</target>
        <note>Debug is a noun in this context, not a verb.</note>
      </trans-unit>
      <trans-unit id="variables">
        <source xml:lang="en">Variables</source>
        <target state="translated">変数</target>
      </trans-unit>
      <trans-unit id="watch">
        <source xml:lang="en">Watch</source>
        <target state="translated">ウォッチ式</target>
      </trans-unit>
      <trans-unit id="callStack">
        <source xml:lang="en">Call Stack</source>
        <target state="translated">コール スタック</target>
      </trans-unit>
      <trans-unit id="breakpoints">
        <source xml:lang="en">Breakpoints</source>
        <target state="translated">ブレークポイント</target>
      </trans-unit>
      <trans-unit id="loadedScripts">
        <source xml:lang="en">Loaded Scripts</source>
        <target state="translated">読み込み済みのスクリプト</target>
      </trans-unit>
      <trans-unit id="view">
        <source xml:lang="en">View</source>
        <target state="translated">ビュー</target>
      </trans-unit>
      <trans-unit id="debugCategory">
        <source xml:lang="en">Debug</source>
        <target state="translated">デバッグ</target>
      </trans-unit>
      <trans-unit id="runCategory">
        <source xml:lang="en">Run</source>
        <target state="translated">実行</target>
      </trans-unit>
      <trans-unit id="terminateThread">
        <source xml:lang="en">Terminate Thread</source>
        <target state="translated">スレッドを終了</target>
      </trans-unit>
      <trans-unit id="debugFocusConsole">
        <source xml:lang="en">Focus on Debug Console View</source>
        <target state="translated">デバッグ コンソール ビュー にフォーカスする</target>
        <note>Debug is a noun in this context, not a verb.</note>
      </trans-unit>
      <trans-unit id="jumpToCursor">
        <source xml:lang="en">Jump to Cursor</source>
        <target state="translated">カーソルへ移動</target>
      </trans-unit>
      <trans-unit id="inlineBreakpoint">
        <source xml:lang="en">Inline Breakpoint</source>
        <target state="translated">インライン ブレークポイント</target>
      </trans-unit>
      <trans-unit id="startDebugPlaceholder">
        <source xml:lang="en">Type the name of a launch configuration to run.</source>
        <target state="translated">実行する起動構成の名前を入力します。</target>
      </trans-unit>
      <trans-unit id="startDebuggingHelp">
        <source xml:lang="en">Start Debugging</source>
        <target state="translated">デバッグの開始</target>
      </trans-unit>
      <trans-unit id="debugConfigurationTitle">
        <source xml:lang="en">Debug</source>
        <target state="translated">デバッグ</target>
      </trans-unit>
      <trans-unit id="allowBreakpointsEverywhere">
        <source xml:lang="en">Allow setting breakpoints in any file.</source>
        <target state="translated">任意のファイルにブレークポイントを設定できるようにします。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="openExplorerOnEnd">
        <source xml:lang="en">Automatically open the explorer view at the end of a debug session.</source>
        <target state="translated">デバッグ セッションの終了時にエクスプローラー ビューを自動的に開きます。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="inlineValues">
        <source xml:lang="en">Show variable values inline in editor while debugging.</source>
        <target state="translated">デバッグ中にエディターの行内に変数値を表示します。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="toolBarLocation">
        <source xml:lang="en">Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.</source>
        <target state="translated">デバッグ ツールバーの位置を制御します。すべてのビューに表示する場合には `floating`、デバッグ ビューの場合は `docked` に設定します。その他の場合は、`hidden` にします。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="never">
        <source xml:lang="en">Never show debug in status bar</source>
        <target state="translated">今後ステータス バーにデバッグを表示しない</target>
      </trans-unit>
      <trans-unit id="always">
        <source xml:lang="en">Always show debug in status bar</source>
        <target state="translated">ステータス バーにデバッグを常に表示する</target>
      </trans-unit>
      <trans-unit id="onFirstSessionStart">
        <source xml:lang="en">Show debug in status bar only after debug was started for the first time</source>
        <target state="translated">初めてデバッグが開始されたときのみステータス バーにデバッグを表示する</target>
      </trans-unit>
      <trans-unit id="showInStatusBar">
        <source xml:lang="en">Controls when the debug status bar should be visible.</source>
        <target state="translated">いつデバッグ ステータス バーを表示するかを制御します。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="debug.console.closeOnEnd">
        <source xml:lang="en">Controls if the debug console should be automatically closed when the debug session ends.</source>
        <target state="translated">デバッグ セッションの終了時にデバッグ コンソールを自動的に閉じるかどうかを制御します。</target>
      </trans-unit>
      <trans-unit id="openDebug">
        <source xml:lang="en">Controls when the debug view should open.</source>
        <target state="translated">いつデバッグ ビューを開くかを制御します。</target>
      </trans-unit>
      <trans-unit id="enableAllHovers">
        <source xml:lang="en">Controls whether the non-debug hovers should be enabled while debugging. When enabled the hover providers will be called to provide a hover. Regular hovers will not be shown even if this setting is enabled.</source>
        <target state="translated">デバッグ中に非デバッグ ホバーを有効にするかどうかを制御します。有効にした場合、ホバーを提供するためにホバー プロバイダーが呼び出されます。この設定を有効にしても、通常のホバーは表示されません。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="showSubSessionsInToolBar">
        <source xml:lang="en">Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.</source>
        <target state="translated">デバッグ ツール バーにデバッグのサブセッションを表示するかどうかを制御します。false に設定されている場合、サブセッションに対する停止コマンドによって、親セッションも停止します。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="debug.console.fontSize">
        <source xml:lang="en">Controls the font size in pixels in the debug console.</source>
        <target state="translated">デバッグ コンソール内のフォント サイズをピクセル単位で制御します。</target>
      </trans-unit>
      <trans-unit id="debug.console.fontFamily">
        <source xml:lang="en">Controls the font family in the debug console.</source>
        <target state="translated">デバッグ コンソールのフォント ファミリを制御します。</target>
      </trans-unit>
      <trans-unit id="debug.console.lineHeight">
        <source xml:lang="en">Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.</source>
        <target state="translated">デバッグ コンソール内での行の高さをピクセル単位で制御します。フォント サイズから行の高さを計算するには 0 を使用します。</target>
      </trans-unit>
      <trans-unit id="debug.console.wordWrap">
        <source xml:lang="en">Controls if the lines should wrap in the debug console.</source>
        <target state="translated">行をデバッグ コンソールで折り返す必要があるかどうかを制御します。</target>
      </trans-unit>
      <trans-unit id="debug.console.historySuggestions">
        <source xml:lang="en">Controls if the debug console should suggest previously typed input.</source>
        <target state="translated">以前に型指定された入力をデバッグ コンソールが提案する必要があるかどうかを制御します。</target>
      </trans-unit>
      <trans-unit id="launch">
        <source xml:lang="en">Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.</source>
        <target state="translated">グローバル デバッグ起動構成。ワークスペースで共有されている 'launch.json' の代わりに使用する必要があります。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="debug.focusWindowOnBreak">
        <source xml:lang="en">Controls whether the workbench window should be focused when the debugger breaks.</source>
        <target state="translated">デバッガーが中断したときにワークベンチ ウィンドウにフォーカスするかどうかを制御します。</target>
      </trans-unit>
      <trans-unit id="debugAnyway">
        <source xml:lang="en">Ignore task errors and start debugging.</source>
        <target state="translated">タスク エラーを無視してデバッグを開始します。</target>
      </trans-unit>
      <trans-unit id="showErrors">
        <source xml:lang="en">Show the Problems view and do not start debugging.</source>
        <target state="translated">問題ビューを表示し、デバッグを開始しない。</target>
      </trans-unit>
      <trans-unit id="prompt">
        <source xml:lang="en">Prompt user.</source>
        <target state="translated">ユーザーに確認します。</target>
      </trans-unit>
      <trans-unit id="cancel">
        <source xml:lang="en">Cancel debugging.</source>
        <target state="translated">デバッグをキャンセルします。</target>
      </trans-unit>
      <trans-unit id="debug.onTaskErrors">
        <source xml:lang="en">Controls what to do when errors are encountered after running a preLaunchTask.</source>
        <target state="translated">preLaunchTask の実行後にエラーが発生した場合の処理を制御します。</target>
      </trans-unit>
      <trans-unit id="showBreakpointsInOverviewRuler">
        <source xml:lang="en">Controls whether breakpoints should be shown in the overview ruler.</source>
        <target state="translated">ブレークポイントを概要ルーラーに表示するかどうかを制御します。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="showInlineBreakpointCandidates">
        <source xml:lang="en">Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.</source>
        <target state="translated">デバッグ中にインライン ブレークポイント候補の装飾をエディターに表示するかどうかを制御します。</target>
        <note>This is the description for a setting</note>
      </trans-unit>
      <trans-unit id="stepBackDebug">
        <source xml:lang="en">Step Back</source>
        <target state="translated">1 つ戻る</target>
      </trans-unit>
      <trans-unit id="reverseContinue">
        <source xml:lang="en">Reverse</source>
        <target state="translated">反転</target>
      </trans-unit>
      <trans-unit id="restartFrame">
        <source xml:lang="en">Restart Frame</source>
        <target state="translated">フレームの再起動</target>
      </trans-unit>
      <trans-unit id="copyStackTrace">
        <source xml:lang="en">Copy Call Stack</source>
        <target state="translated">呼び出し履歴のコピー</target>
      </trans-unit>
      <trans-unit id="miViewRun">
        <source xml:lang="en">&amp;&amp;Run</source>
        <target state="translated">実行(&amp;&amp;R)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miToggleDebugConsole">
        <source xml:lang="en">De&amp;&amp;bug Console</source>
        <target state="translated">デバッグ コンソール(&amp;&amp;B)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miStartDebugging">
        <source xml:lang="en">&amp;&amp;Start Debugging</source>
        <target state="translated">デバッグの開始(&amp;&amp;S)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miRun">
        <source xml:lang="en">Run &amp;&amp;Without Debugging</source>
        <target state="translated">デバッグなしで実行(&amp;&amp;W)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miStopDebugging">
        <source xml:lang="en">&amp;&amp;Stop Debugging</source>
        <target state="translated">デバッグの停止(&amp;&amp;S)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miRestart Debugging">
        <source xml:lang="en">&amp;&amp;Restart Debugging</source>
        <target state="translated">デバッグの再起動(&amp;&amp;R)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miOpenConfigurations">
        <source xml:lang="en">Open &amp;&amp;Configurations</source>
        <target state="translated">構成を開く(&amp;&amp;C)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miAddConfiguration">
        <source xml:lang="en">A&amp;&amp;dd Configuration...</source>
        <target state="translated">構成の追加(&amp;&amp;D)...</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miStepOver">
        <source xml:lang="en">Step &amp;&amp;Over</source>
        <target state="translated">ステップ オーバーする(&amp;&amp;O)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miStepInto">
        <source xml:lang="en">Step &amp;&amp;Into</source>
        <target state="translated">ステップ インする(&amp;&amp;I)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miStepOut">
        <source xml:lang="en">Step O&amp;&amp;ut</source>
        <target state="translated">ステップ アウトする(&amp;&amp;U)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miContinue">
        <source xml:lang="en">&amp;&amp;Continue</source>
        <target state="translated">続行(&amp;&amp;C)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miToggleBreakpoint">
        <source xml:lang="en">Toggle &amp;&amp;Breakpoint</source>
        <target state="translated">ブレークポイントの切り替え(&amp;&amp;B)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miConditionalBreakpoint">
        <source xml:lang="en">&amp;&amp;Conditional Breakpoint...</source>
        <target state="translated">条件付きブレークポイント(&amp;&amp;C)...</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miInlineBreakpoint">
        <source xml:lang="en">Inline Breakp&amp;&amp;oint</source>
        <target state="translated">インライン ブレークポイント(&amp;&amp;O)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miFunctionBreakpoint">
        <source xml:lang="en">&amp;&amp;Function Breakpoint...</source>
        <target state="translated">関数のブレークポイント(&amp;&amp;F)...</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miLogPoint">
        <source xml:lang="en">&amp;&amp;Logpoint...</source>
        <target state="translated">ログポイント(&amp;&amp;L)...</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miNewBreakpoint">
        <source xml:lang="en">&amp;&amp;New Breakpoint</source>
        <target state="translated">新しいブレークポイント(&amp;&amp;N)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miEnableAllBreakpoints">
        <source xml:lang="en">&amp;&amp;Enable All Breakpoints</source>
        <target state="translated">すべてのブレークポイントを有効にする(&amp;&amp;E)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miDisableAllBreakpoints">
        <source xml:lang="en">Disable A&amp;&amp;ll Breakpoints</source>
        <target state="translated">すべてのブレークポイントを無効にする(&amp;&amp;L)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miRemoveAllBreakpoints">
        <source xml:lang="en">Remove &amp;&amp;All Breakpoints</source>
        <target state="translated">すべてのブレークポイントの削除(&amp;&amp;A)</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
      <trans-unit id="miInstallAdditionalDebuggers">
        <source xml:lang="en">&amp;&amp;Install Additional Debuggers...</source>
        <target state="translated">その他のデバッガーをインストールします(&amp;&amp;I)...</target>
        <note>&amp;&amp; denotes a mnemonic</note>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/repl" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="replAriaLabel">
        <source xml:lang="en">Read Eval Print Loop Panel</source>
        <target state="translated">Read Eval Print Loop パネル</target>
      </trans-unit>
      <trans-unit id="debugConsole">
        <source xml:lang="en">Debug Console</source>
        <target state="translated">デバッグ コンソール</target>
      </trans-unit>
      <trans-unit id="copy">
        <source xml:lang="en">Copy</source>
        <target state="translated">コピー</target>
      </trans-unit>
      <trans-unit id="copyAll">
        <source xml:lang="en">Copy All</source>
        <target state="translated">すべてコピー</target>
      </trans-unit>
      <trans-unit id="collapse">
        <source xml:lang="en">Collapse All</source>
        <target state="translated">すべて折りたたんで表示します。</target>
      </trans-unit>
      <trans-unit id="startDebugFirst">
        <source xml:lang="en">Please start a debug session to evaluate expressions</source>
        <target state="translated">デバッグ セッションを開始して式を評価してください</target>
      </trans-unit>
      <trans-unit id="actions.repl.acceptInput">
        <source xml:lang="en">REPL Accept Input</source>
        <target state="translated">REPL での入力を反映</target>
        <note>Apply input from the debug console input box</note>
      </trans-unit>
      <trans-unit id="repl.action.filter">
        <source xml:lang="en">REPL Focus Content to Filter</source>
        <target state="translated">フィルター対象の REPL フォーカス コンテンツ</target>
      </trans-unit>
      <trans-unit id="actions.repl.copyAll">
        <source xml:lang="en">Debug: Console Copy All</source>
        <target state="translated">デバッグ: コンソールをすべてコピー</target>
      </trans-unit>
      <trans-unit id="selectRepl">
        <source xml:lang="en">Select Debug Console</source>
        <target state="translated">デバッグ コンソールを選択</target>
      </trans-unit>
      <trans-unit id="clearRepl">
        <source xml:lang="en">Clear Console</source>
        <target state="translated">コンソールのクリア</target>
      </trans-unit>
      <trans-unit id="debugConsoleCleared">
        <source xml:lang="en">Debug console was cleared</source>
        <target state="translated">デバッグ コンソールがクリアされました</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/welcomeView" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="run">
        <source xml:lang="en">Run</source>
        <target state="translated">実行</target>
      </trans-unit>
      <trans-unit id="openAFileWhichCanBeDebugged">
        <source xml:lang="en">[Open a file](command:{0}) which can be debugged or run.</source>
        <target state="translated">デバッグまたは実行可能な[ファイルを開きます](command:{0})。</target>
        <note>Please do not translate the word "commmand", it is part of our internal syntax which must not change</note>
      </trans-unit>
      <trans-unit id="runAndDebugAction">
        <source xml:lang="en">[Run and Debug{0}](command:{1})</source>
        <target state="translated">[実行とデバッグ{0}](command:{1})</target>
        <note>Please do not translate the word "commmand", it is part of our internal syntax which must not change</note>
      </trans-unit>
      <trans-unit id="customizeRunAndDebug">
        <source xml:lang="en">To customize Run and Debug [create a launch.json file](command:{0}).</source>
        <target state="translated">実行とデバッグをカスタマイズするには、[launch.json ファイルを作成します](command:{0})。</target>
        <note>Please do not translate the word "commmand", it is part of our internal syntax which must not change</note>
      </trans-unit>
      <trans-unit id="customizeRunAndDebugOpenFolder">
        <source xml:lang="en">To customize Run and Debug, [open a folder](command:{0}) and create a launch.json file.</source>
        <target state="translated">実行とデバッグをカスタマイズするには、[フォルダーを開いた](command:{0})後、launch.json ファイルを作成します。</target>
        <note>Please do not translate the word "commmand", it is part of our internal syntax which must not change</note>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugActionViewItems" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="debugLaunchConfigurations">
        <source xml:lang="en">Debug Launch Configurations</source>
        <target state="translated">起動構成のデバッグ</target>
      </trans-unit>
      <trans-unit id="noConfigurations">
        <source xml:lang="en">No Configurations</source>
        <target state="translated">構成がありません</target>
      </trans-unit>
      <trans-unit id="addConfigTo">
        <source xml:lang="en">Add Config ({0})...</source>
        <target state="translated">構成 ({0}) の追加...</target>
      </trans-unit>
      <trans-unit id="addConfiguration">
        <source xml:lang="en">Add Configuration...</source>
        <target state="translated">構成の追加...</target>
      </trans-unit>
      <trans-unit id="debugSession">
        <source xml:lang="en">Debug Session</source>
        <target state="translated">デバッグ セッション</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/exceptionWidget" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="debugExceptionWidgetBorder">
        <source xml:lang="en">Exception widget border color.</source>
        <target state="translated">例外ウィジェットの境界線の色。</target>
      </trans-unit>
      <trans-unit id="debugExceptionWidgetBackground">
        <source xml:lang="en">Exception widget background color.</source>
        <target state="translated">例外ウィジェットの背景色。</target>
      </trans-unit>
      <trans-unit id="exceptionThrownWithId">
        <source xml:lang="en">Exception has occurred: {0}</source>
        <target state="translated">例外が発生しました: {0}</target>
      </trans-unit>
      <trans-unit id="exceptionThrown">
        <source xml:lang="en">Exception has occurred.</source>
        <target state="translated">例外が発生しました</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugToolBar" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="debugToolBarBackground">
        <source xml:lang="en">Debug toolbar background color.</source>
        <target state="translated">デバッグ ツール バーの背景色。</target>
      </trans-unit>
      <trans-unit id="debugToolBarBorder">
        <source xml:lang="en">Debug toolbar border color.</source>
        <target state="translated">デバッグ ツール バーの境界線色。</target>
      </trans-unit>
      <trans-unit id="debugIcon.startForeground">
        <source xml:lang="en">Debug toolbar icon for start debugging.</source>
        <target state="translated">デバッグを開始するためのデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.pauseForeground">
        <source xml:lang="en">Debug toolbar icon for pause.</source>
        <target state="translated">一時停止用のデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.stopForeground">
        <source xml:lang="en">Debug toolbar icon for stop.</source>
        <target state="translated">停止用のデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.disconnectForeground">
        <source xml:lang="en">Debug toolbar icon for disconnect.</source>
        <target state="translated">切断用のデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.restartForeground">
        <source xml:lang="en">Debug toolbar icon for restart.</source>
        <target state="translated">再起動用のデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.stepOverForeground">
        <source xml:lang="en">Debug toolbar icon for step over.</source>
        <target state="translated">ステップ オーバー用のデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.stepIntoForeground">
        <source xml:lang="en">Debug toolbar icon for step into.</source>
        <target state="translated">ステップ イン用のデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.stepOutForeground">
        <source xml:lang="en">Debug toolbar icon for step over.</source>
        <target state="translated">ステップ オーバー用のデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.continueForeground">
        <source xml:lang="en">Debug toolbar icon for continue.</source>
        <target state="translated">続行するためのデバッグ ツール バー アイコン。</target>
      </trans-unit>
      <trans-unit id="debugIcon.stepBackForeground">
        <source xml:lang="en">Debug toolbar icon for step back.</source>
        <target state="translated">ステップ バックのデバッグ ツール バー アイコン。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/statusbarColorProvider" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="statusBarDebuggingBackground">
        <source xml:lang="en">Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window</source>
        <target state="translated">プログラムをデバッグしているときのステータス バーの背景色。ステータス バーはウィンドウの下部に表示されます</target>
      </trans-unit>
      <trans-unit id="statusBarDebuggingForeground">
        <source xml:lang="en">Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window</source>
        <target state="translated">プログラムをデバッグしているときのステータス バーの前景色。ステータス バーはウィンドウの下部に表示されます</target>
      </trans-unit>
      <trans-unit id="statusBarDebuggingBorder">
        <source xml:lang="en">Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window</source>
        <target state="translated">プログラムをデバッグしているときのサイドバーおよびエディターを隔てるステータス バーの境界線の色。ステータス バーはウィンドウの下部に表示されます</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/common/debugContentProvider" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="unable">
        <source xml:lang="en">Unable to resolve the resource without a debug session</source>
        <target state="translated">デバッグ セッションなしでリソースを解決できません</target>
      </trans-unit>
      <trans-unit id="canNotResolveSourceWithError">
        <source xml:lang="en">Could not load source '{0}': {1}.</source>
        <target state="translated">ソース '{0}' を読み込めませんでした: {1}。</target>
      </trans-unit>
      <trans-unit id="canNotResolveSource">
        <source xml:lang="en">Could not load source '{0}'.</source>
        <target state="translated">ソース '{0}' を読み込めませんでした。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugStatus" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="status.debug">
        <source xml:lang="en">Debug</source>
        <target state="translated">デバッグ</target>
      </trans-unit>
      <trans-unit id="selectAndStartDebug">
        <source xml:lang="en">Select and start debug configuration</source>
        <target state="translated">選択してデバッグ構成を開始</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugQuickAccess" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="customizeLaunchConfig">
        <source xml:lang="en">Configure Launch Configuration</source>
        <target state="translated">起動構成の設定</target>
      </trans-unit>
      <trans-unit id="addConfigTo">
        <source xml:lang="en">Add Config ({0})...</source>
        <target state="translated">構成 ({0}) の追加...</target>
      </trans-unit>
      <trans-unit id="addConfiguration">
        <source xml:lang="en">Add Configuration...</source>
        <target state="translated">構成の追加...</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugHover" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="treeAriaLabel">
        <source xml:lang="en">Debug Hover</source>
        <target state="translated">デバッグ ホバー</target>
      </trans-unit>
      <trans-unit id="variableAriaLabel">
        <source xml:lang="en">{0} value {1}, variables, debug</source>
        <target state="translated">{0} 値 {1}、変数、デバッグ</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugActions" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="openLaunchJson">
        <source xml:lang="en">Open {0}</source>
        <target state="translated">{0} を開く</target>
      </trans-unit>
      <trans-unit id="launchJsonNeedsConfigurtion">
        <source xml:lang="en">Configure or Fix 'launch.json'</source>
        <target state="translated">'launch.json' を構成または修正してください</target>
      </trans-unit>
      <trans-unit id="noFolderDebugConfig">
        <source xml:lang="en">Please first open a folder in order to do advanced debug configuration.</source>
        <target state="translated">高度なデバッグ構成を行うには、最初にフォルダーを開いてください。</target>
      </trans-unit>
      <trans-unit id="selectWorkspaceFolder">
        <source xml:lang="en">Select a workspace folder to create a launch.json file in</source>
        <target state="translated">launch.json ファイルを作成するワークスペース フォルダーを選択します</target>
      </trans-unit>
      <trans-unit id="startDebug">
        <source xml:lang="en">Start Debugging</source>
        <target state="translated">デバッグの開始</target>
      </trans-unit>
      <trans-unit id="startWithoutDebugging">
        <source xml:lang="en">Start Without Debugging</source>
        <target state="translated">デバッグなしで開始</target>
      </trans-unit>
      <trans-unit id="selectAndStartDebugging">
        <source xml:lang="en">Select and Start Debugging</source>
        <target state="translated">選択してデバッグを開始</target>
      </trans-unit>
      <trans-unit id="removeBreakpoint">
        <source xml:lang="en">Remove Breakpoint</source>
        <target state="translated">ブレークポイントの削除</target>
      </trans-unit>
      <trans-unit id="removeAllBreakpoints">
        <source xml:lang="en">Remove All Breakpoints</source>
        <target state="translated">すべてのブレークポイントを削除する</target>
      </trans-unit>
      <trans-unit id="enableAllBreakpoints">
        <source xml:lang="en">Enable All Breakpoints</source>
        <target state="translated">すべてのブレークポイントを有効にする</target>
      </trans-unit>
      <trans-unit id="disableAllBreakpoints">
        <source xml:lang="en">Disable All Breakpoints</source>
        <target state="translated">すべてのブレークポイントを無効にする</target>
      </trans-unit>
      <trans-unit id="activateBreakpoints">
        <source xml:lang="en">Activate Breakpoints</source>
        <target state="translated">ブレークポイントのアクティブ化</target>
      </trans-unit>
      <trans-unit id="deactivateBreakpoints">
        <source xml:lang="en">Deactivate Breakpoints</source>
        <target state="translated">ブレークポイントの非アクティブ化</target>
      </trans-unit>
      <trans-unit id="reapplyAllBreakpoints">
        <source xml:lang="en">Reapply All Breakpoints</source>
        <target state="translated">すべてのブレークポイントを再適用する</target>
      </trans-unit>
      <trans-unit id="addFunctionBreakpoint">
        <source xml:lang="en">Add Function Breakpoint</source>
        <target state="translated">関数ブレークポイントの追加</target>
      </trans-unit>
      <trans-unit id="addWatchExpression">
        <source xml:lang="en">Add Expression</source>
        <target state="translated">式の追加</target>
      </trans-unit>
      <trans-unit id="removeAllWatchExpressions">
        <source xml:lang="en">Remove All Expressions</source>
        <target state="translated">すべての式を削除する</target>
      </trans-unit>
      <trans-unit id="focusSession">
        <source xml:lang="en">Focus Session</source>
        <target state="translated">セッションにフォーカス</target>
      </trans-unit>
      <trans-unit id="copyValue">
        <source xml:lang="en">Copy Value</source>
        <target state="translated">値のコピー</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugEditorActions" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="toggleBreakpointAction">
        <source xml:lang="en">Debug: Toggle Breakpoint</source>
        <target state="translated">デバッグ: ブレークポイントの切り替え</target>
      </trans-unit>
      <trans-unit id="conditionalBreakpointEditorAction">
        <source xml:lang="en">Debug: Add Conditional Breakpoint...</source>
        <target state="translated">デバッグ: 条件付きブレークポイントの追加...</target>
      </trans-unit>
      <trans-unit id="logPointEditorAction">
        <source xml:lang="en">Debug: Add Logpoint...</source>
        <target state="translated">デバッグ: ログポイントの追加...</target>
      </trans-unit>
      <trans-unit id="runToCursor">
        <source xml:lang="en">Run to Cursor</source>
        <target state="translated">カーソル行の前まで実行</target>
      </trans-unit>
      <trans-unit id="evaluateInDebugConsole">
        <source xml:lang="en">Evaluate in Debug Console</source>
        <target state="translated">デバッグ コンソールでの評価</target>
      </trans-unit>
      <trans-unit id="addToWatch">
        <source xml:lang="en">Add to Watch</source>
        <target state="translated">ウォッチに追加</target>
      </trans-unit>
      <trans-unit id="showDebugHover">
        <source xml:lang="en">Debug: Show Hover</source>
        <target state="translated">デバッグ: ホバーの表示</target>
      </trans-unit>
      <trans-unit id="goToNextBreakpoint">
        <source xml:lang="en">Debug: Go To Next Breakpoint</source>
        <target state="translated">デバッグ: 次のブレークポイントへ移動</target>
      </trans-unit>
      <trans-unit id="goToPreviousBreakpoint">
        <source xml:lang="en">Debug: Go To Previous Breakpoint</source>
        <target state="translated">デバッグ: 前のブレークポイントへ移動</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/linkDetector" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="fileLinkMac">
        <source xml:lang="en">Cmd + click to follow link</source>
        <target state="translated">command キーを押しながらクリックしてリンク先を表示</target>
      </trans-unit>
      <trans-unit id="fileLink">
        <source xml:lang="en">Ctrl + click to follow link</source>
        <target state="translated">Ctrl キーを押しながらクリックしてリンク先を表示</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/common/replModel" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="consoleCleared">
        <source xml:lang="en">Console was cleared</source>
        <target state="translated">コンソールはクリアされました</target>
      </trans-unit>
      <trans-unit id="snapshotObj">
        <source xml:lang="en">Only primitive values are shown for this object.</source>
        <target state="translated">このオブジェクトのプリミティブ値のみ表示されます。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/breakpointWidget" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="breakpointWidgetLogMessagePlaceholder">
        <source xml:lang="en">Message to log when breakpoint is hit. Expressions within {} are interpolated. 'Enter' to accept, 'esc' to cancel.</source>
        <target state="translated">ブレークポイントにヒットしたときにログに記録するメッセージ。{} 内の式は補間されます。受け入れるには 'Enter' を、キャンセルするには 'esc' を押します。</target>
      </trans-unit>
      <trans-unit id="breakpointWidgetHitCountPlaceholder">
        <source xml:lang="en">Break when hit count condition is met. 'Enter' to accept, 'esc' to cancel.</source>
        <target state="translated">ヒット カウント条件が満たされる場合に中断します。'Enter' を押して受け入れるか 'Esc' を押して取り消します。</target>
      </trans-unit>
      <trans-unit id="breakpointWidgetExpressionPlaceholder">
        <source xml:lang="en">Break when expression evaluates to true. 'Enter' to accept, 'esc' to cancel.</source>
        <target state="translated">式が true と評価される場合に中断します。'Enter' を押して受け入れるか 'Esc' を押して取り消します。</target>
      </trans-unit>
      <trans-unit id="expression">
        <source xml:lang="en">Expression</source>
        <target state="translated">EXPRESSION</target>
      </trans-unit>
      <trans-unit id="hitCount">
        <source xml:lang="en">Hit Count</source>
        <target state="translated">ヒット カウント</target>
      </trans-unit>
      <trans-unit id="logMessage">
        <source xml:lang="en">Log Message</source>
        <target state="translated">ログ メッセージ</target>
      </trans-unit>
      <trans-unit id="breakpointType">
        <source xml:lang="en">Breakpoint Type</source>
        <target state="translated">ブレークポイント タイプ</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/watchExpressionsView" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="watchAriaTreeLabel">
        <source xml:lang="en">Debug Watch Expressions</source>
        <target state="translated">ウォッチ式のデバッグ</target>
        <note>Debug is a noun in this context, not a verb.</note>
      </trans-unit>
      <trans-unit id="editWatchExpression">
        <source xml:lang="en">Edit Expression</source>
        <target state="translated">式の編集</target>
      </trans-unit>
      <trans-unit id="removeWatchExpression">
        <source xml:lang="en">Remove Expression</source>
        <target state="translated">式の削除</target>
      </trans-unit>
      <trans-unit id="watchExpressionInputAriaLabel">
        <source xml:lang="en">Type watch expression</source>
        <target state="translated">ウォッチ式を入力します</target>
      </trans-unit>
      <trans-unit id="watchExpressionPlaceholder">
        <source xml:lang="en">Expression to watch</source>
        <target state="translated">ウォッチ対象の式</target>
      </trans-unit>
      <trans-unit id="watchExpressionAriaLabel">
        <source xml:lang="en">{0} value {1}, watch, debug</source>
        <target state="translated">{0} 値 {1}、ウォッチ、デバッグ</target>
      </trans-unit>
      <trans-unit id="watchVariableAriaLabel">
        <source xml:lang="en">{0} value {1}, watch, debug</source>
        <target state="translated">{0} 値 {1}、ウォッチ、デバッグ</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/variablesView" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="variablesAriaTreeLabel">
        <source xml:lang="en">Debug Variables</source>
        <target state="translated">変数のデバッグ</target>
      </trans-unit>
      <trans-unit id="setValue">
        <source xml:lang="en">Set Value</source>
        <target state="translated">値の設定</target>
      </trans-unit>
      <trans-unit id="copyAsExpression">
        <source xml:lang="en">Copy as Expression</source>
        <target state="translated">式としてコピー</target>
      </trans-unit>
      <trans-unit id="addToWatchExpressions">
        <source xml:lang="en">Add to Watch</source>
        <target state="translated">ウォッチに追加</target>
      </trans-unit>
      <trans-unit id="breakWhenValueChanges">
        <source xml:lang="en">Break When Value Changes</source>
        <target state="translated">値が変更されたときに中断する</target>
      </trans-unit>
      <trans-unit id="variableValueAriaLabel">
        <source xml:lang="en">Type new variable value</source>
        <target state="translated">新しい変数値を入力する</target>
      </trans-unit>
      <trans-unit id="variableScopeAriaLabel">
        <source xml:lang="en">Scope {0}, variables, debug</source>
        <target state="translated">範囲 {0}、変数、デバッグ</target>
      </trans-unit>
      <trans-unit id="variableAriaLabel">
        <source xml:lang="en">{0} value {1}, variables, debug</source>
        <target state="translated">{0} 値 {1}、変数、デバッグ</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/replViewer" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="stateCapture">
        <source xml:lang="en">Object state is captured from first evaluation</source>
        <target state="translated">最初の評価からオブジェクトの状態がキャプチャされます</target>
      </trans-unit>
      <trans-unit id="replVariableAriaLabel">
        <source xml:lang="en">Variable {0} has value {1}, read eval print loop, debug</source>
        <target state="translated">変数 {0} に値 {1} があります、Read Eval Print Loop、デバッグ</target>
      </trans-unit>
      <trans-unit id="replValueOutputAriaLabel">
        <source xml:lang="en">{0}, read eval print loop, debug</source>
        <target state="translated">{0}、Read Eval Print Loop、デバッグ</target>
      </trans-unit>
      <trans-unit id="replRawObjectAriaLabel">
        <source xml:lang="en">Repl variable {0} has value {1}, read eval print loop, debug</source>
        <target state="translated">Repl 変数 {0} に値 {1} があります、Read Eval Print Loop、デバッグ</target>
      </trans-unit>
      <trans-unit id="replGroup">
        <source xml:lang="en">Repl group {0}, read eval print loop, debug</source>
        <target state="translated">Repl グループ {0}、Read Eval Print Loop、デバッグ</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/node/debugAdapter" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="debugAdapterBinNotFound">
        <source xml:lang="en">Debug adapter executable '{0}' does not exist.</source>
        <target state="translated">デバッグ アダプターの実行可能ファイル '{0}' がありません。</target>
      </trans-unit>
      <trans-unit id="debugAdapterCannotDetermineExecutable">
        <source xml:lang="en">Cannot determine executable for debug adapter '{0}'.</source>
        <target state="translated">デバッグ アダプター '{0}' の実行可能ファイルを判別できません。</target>
        <note>Adapter executable file not found</note>
      </trans-unit>
      <trans-unit id="unableToLaunchDebugAdapter">
        <source xml:lang="en">Unable to launch debug adapter from '{0}'.</source>
        <target state="translated">デバッグ アダプターを {0} から起動できません。</target>
      </trans-unit>
      <trans-unit id="unableToLaunchDebugAdapterNoArgs">
        <source xml:lang="en">Unable to launch debug adapter.</source>
        <target state="translated">デバッグ アダプターを起動できません。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/loadedScriptsView" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="loadedScriptsAriaLabel">
        <source xml:lang="en">Debug Loaded Scripts</source>
        <target state="translated">読み込み済みのスクリプトのデバッグ</target>
        <note>Debug is a noun in this context, not a verb.</note>
      </trans-unit>
      <trans-unit id="loadedScriptsSession">
        <source xml:lang="en">Debug Session</source>
        <target state="translated">デバッグ セッション</target>
      </trans-unit>
      <trans-unit id="loadedScriptsRootFolderAriaLabel">
        <source xml:lang="en">Workspace folder {0}, loaded script, debug</source>
        <target state="translated">ワークスペース フォルダー {0}、読み込み済みスクリプト、デバッグ</target>
      </trans-unit>
      <trans-unit id="loadedScriptsSessionAriaLabel">
        <source xml:lang="en">Session {0}, loaded script, debug</source>
        <target state="translated">セッション {0}、読み込まれたスクリプト、デバッグ</target>
      </trans-unit>
      <trans-unit id="loadedScriptsFolderAriaLabel">
        <source xml:lang="en">Folder {0}, loaded script, debug</source>
        <target state="translated">フォルダー {0}、読み込み済みスクリプト、デバッグ</target>
      </trans-unit>
      <trans-unit id="loadedScriptsSourceAriaLabel">
        <source xml:lang="en">{0}, loaded script, debug</source>
        <target state="translated">{0}、読み込み済みスクリプト、デバッグ</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugCommands" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="restartDebug">
        <source xml:lang="en">Restart</source>
        <target state="translated">再起動</target>
      </trans-unit>
      <trans-unit id="stepOverDebug">
        <source xml:lang="en">Step Over</source>
        <target state="translated">ステップ オーバー</target>
      </trans-unit>
      <trans-unit id="stepIntoDebug">
        <source xml:lang="en">Step Into</source>
        <target state="translated">ステップ インする</target>
      </trans-unit>
      <trans-unit id="stepOutDebug">
        <source xml:lang="en">Step Out</source>
        <target state="translated">ステップ アウト</target>
      </trans-unit>
      <trans-unit id="pauseDebug">
        <source xml:lang="en">Pause</source>
        <target state="translated">一時停止</target>
      </trans-unit>
      <trans-unit id="disconnect">
        <source xml:lang="en">Disconnect</source>
        <target state="translated">切断</target>
      </trans-unit>
      <trans-unit id="stop">
        <source xml:lang="en">Stop</source>
        <target state="translated">停止</target>
      </trans-unit>
      <trans-unit id="continueDebug">
        <source xml:lang="en">Continue</source>
        <target state="translated">続行</target>
      </trans-unit>
      <trans-unit id="chooseLocation">
        <source xml:lang="en">Choose the specific location</source>
        <target state="translated">特定の場所を選択する</target>
      </trans-unit>
      <trans-unit id="noExecutableCode">
        <source xml:lang="en">No executable code is associated at the current cursor position.</source>
        <target state="translated">現在のカーソル位置に実行可能コードは関連付けられていません。</target>
      </trans-unit>
      <trans-unit id="jumpToCursor">
        <source xml:lang="en">Jump to Cursor</source>
        <target state="translated">カーソルへ移動</target>
      </trans-unit>
      <trans-unit id="debug">
        <source xml:lang="en">Debug</source>
        <target state="translated">デバッグ</target>
      </trans-unit>
      <trans-unit id="noFolderDebugConfig">
        <source xml:lang="en">Please first open a folder in order to do advanced debug configuration.</source>
        <target state="translated">高度なデバッグ構成を行うには、最初にフォルダーを開いてください。</target>
      </trans-unit>
      <trans-unit id="addInlineBreakpoint">
        <source xml:lang="en">Add Inline Breakpoint</source>
        <target state="translated">インライン ブレークポイントを追加</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/breakpointsView" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="Logpoint">
        <source xml:lang="en">Logpoint</source>
        <target state="translated">ログポイント</target>
      </trans-unit>
      <trans-unit id="Breakpoint">
        <source xml:lang="en">Breakpoint</source>
        <target state="translated">ブレークポイント</target>
      </trans-unit>
      <trans-unit id="editBreakpoint">
        <source xml:lang="en">Edit {0}...</source>
        <target state="translated">{0} を編集...</target>
      </trans-unit>
      <trans-unit id="removeBreakpoint">
        <source xml:lang="en">Remove {0}</source>
        <target state="translated">{0} の削除</target>
      </trans-unit>
      <trans-unit id="functionBreakpointsNotSupported">
        <source xml:lang="en">Function breakpoints are not supported by this debug type</source>
        <target state="translated">このデバッグの種類では関数ブレークポイントはサポートされていません</target>
      </trans-unit>
      <trans-unit id="dataBreakpointsNotSupported">
        <source xml:lang="en">Data breakpoints are not supported by this debug type</source>
        <target state="translated">このデバッグの種類では、データ ブレークポイントはサポートされていません。</target>
      </trans-unit>
      <trans-unit id="functionBreakpointPlaceholder">
        <source xml:lang="en">Function to break on</source>
        <target state="translated">中断対象の関数</target>
      </trans-unit>
      <trans-unit id="functionBreakPointInputAriaLabel">
        <source xml:lang="en">Type function breakpoint</source>
        <target state="translated">関数ブレークポイントを入力します</target>
      </trans-unit>
      <trans-unit id="disabledLogpoint">
        <source xml:lang="en">Disabled Logpoint</source>
        <target state="translated">無効なログポイント</target>
      </trans-unit>
      <trans-unit id="disabledBreakpoint">
        <source xml:lang="en">Disabled Breakpoint</source>
        <target state="translated">無効なブレークポイント</target>
      </trans-unit>
      <trans-unit id="unverifiedLogpoint">
        <source xml:lang="en">Unverified Logpoint</source>
        <target state="translated">未確認のログポイント</target>
      </trans-unit>
      <trans-unit id="unverifiedBreakopint">
        <source xml:lang="en">Unverified Breakpoint</source>
        <target state="translated">未確認のブレークポイント</target>
      </trans-unit>
      <trans-unit id="functionBreakpointUnsupported">
        <source xml:lang="en">Function breakpoints not supported by this debug type</source>
        <target state="translated">このデバッグの種類では関数ブレークポイントはサポートされていません</target>
      </trans-unit>
      <trans-unit id="functionBreakpoint">
        <source xml:lang="en">Function Breakpoint</source>
        <target state="translated">関数のブレークポイント</target>
      </trans-unit>
      <trans-unit id="dataBreakpointUnsupported">
        <source xml:lang="en">Data breakpoints not supported by this debug type</source>
        <target state="translated">このデバッグの種類ではサポートされていないデータ ブレークポイント</target>
      </trans-unit>
      <trans-unit id="dataBreakpoint">
        <source xml:lang="en">Data Breakpoint</source>
        <target state="translated">データ ブレークポイント</target>
      </trans-unit>
      <trans-unit id="breakpointUnsupported">
        <source xml:lang="en">Breakpoints of this type are not supported by the debugger</source>
        <target state="translated">このタイプのブレークポイントはデバッガーではサポートされていません</target>
      </trans-unit>
      <trans-unit id="logMessage">
        <source xml:lang="en">Log Message: {0}</source>
        <target state="translated">ログ メッセージ: {0}</target>
      </trans-unit>
      <trans-unit id="expression">
        <source xml:lang="en">Expression: {0}</source>
        <target state="translated">式: {0}</target>
      </trans-unit>
      <trans-unit id="hitCount">
        <source xml:lang="en">Hit Count: {0}</source>
        <target state="translated">ヒット カウント: {0}</target>
      </trans-unit>
      <trans-unit id="breakpoint">
        <source xml:lang="en">Breakpoint</source>
        <target state="translated">ブレークポイント</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/common/debugSource" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="unknownSource">
        <source xml:lang="en">Unknown Source</source>
        <target state="translated">不明なソース</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/callStackView" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="debugStopped">
        <source xml:lang="en">Paused on {0}</source>
        <target state="translated">{0} で一時停止</target>
      </trans-unit>
      <trans-unit id="callStackAriaLabel">
        <source xml:lang="en">Debug Call Stack</source>
        <target state="translated">コール スタックのデバッグ</target>
        <note>Debug is a noun in this context, not a verb.</note>
      </trans-unit>
      <trans-unit id="showMoreStackFrames2">
        <source xml:lang="en">Show More Stack Frames</source>
        <target state="translated">他のスタック フレームを表示</target>
      </trans-unit>
      <trans-unit id="session">
        <source xml:lang="en">Session</source>
        <target state="translated">セッション</target>
        <note>Session is a noun</note>
      </trans-unit>
      <trans-unit id="running">
        <source xml:lang="en">Running</source>
        <target state="translated">実行しています</target>
        <note>indicates state</note>
      </trans-unit>
      <trans-unit id="thread">
        <source xml:lang="en">Thread</source>
        <target state="translated">スレッド</target>
      </trans-unit>
      <trans-unit id="restartFrame">
        <source xml:lang="en">Restart Frame</source>
        <target state="translated">フレームの再起動</target>
      </trans-unit>
      <trans-unit id="loadMoreStackFrames">
        <source xml:lang="en">Load More Stack Frames</source>
        <target state="translated">スタック フレームをさらに読み込む</target>
      </trans-unit>
      <trans-unit id="showMoreAndOrigin">
        <source xml:lang="en">Show {0} More: {1}</source>
        <target state="translated">{1} を {0} 個さらに表示する</target>
      </trans-unit>
      <trans-unit id="showMoreStackFrames">
        <source xml:lang="en">Show {0} More Stack Frames</source>
        <target state="translated">スタック フレームを {0} 個さらに表示する</target>
      </trans-unit>
      <trans-unit id="threadAriaLabel">
        <source xml:lang="en">Thread {0}, callstack, debug</source>
        <target state="translated">スレッド {0}、呼び出しスタック、デバッグ</target>
      </trans-unit>
      <trans-unit id="stackFrameAriaLabel">
        <source xml:lang="en">Stack Frame {0} line {1} {2}, callstack, debug</source>
        <target state="translated">スタック フレーム {0} 行 {1} {2}、呼び出しスタック、デバッグ</target>
      </trans-unit>
      <trans-unit id="sessionLabel">
        <source xml:lang="en">Debug Session {0}</source>
        <target state="translated">デバッグ セッション {0}</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugService" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="1activeSession">
        <source xml:lang="en">1 active session</source>
        <target state="translated">1 つのアクティブなセッション</target>
      </trans-unit>
      <trans-unit id="nActiveSessions">
        <source xml:lang="en">{0} active sessions</source>
        <target state="translated">{0} 個のアクティブなセッション</target>
      </trans-unit>
      <trans-unit id="configurationAlreadyRunning">
        <source xml:lang="en">There is already a debug configuration "{0}" running.</source>
        <target state="translated">デバッグ構成  "{0}" が既に実行されています。</target>
      </trans-unit>
      <trans-unit id="compoundMustHaveConfigurations">
        <source xml:lang="en">Compound must have "configurations" attribute set in order to start multiple configurations.</source>
        <target state="translated">複合構成を開始するには、複合に "configurations" 属性が設定されている必要があります。</target>
        <note>compound indicates a "compounds" configuration item
"configurations" is an attribute and should not be localized</note>
      </trans-unit>
      <trans-unit id="noConfigurationNameInWorkspace">
        <source xml:lang="en">Could not find launch configuration '{0}' in the workspace.</source>
        <target state="translated">ワークスペースに起動構成 '{0}' が見つかりませんでした。</target>
      </trans-unit>
      <trans-unit id="multipleConfigurationNamesInWorkspace">
        <source xml:lang="en">There are multiple launch configurations '{0}' in the workspace. Use folder name to qualify the configuration.</source>
        <target state="translated">ワークスペースに複数の起動構成 '{0}' があります。フォルダー名を使用して構成を修飾してください。</target>
      </trans-unit>
      <trans-unit id="noFolderWithName">
        <source xml:lang="en">Can not find folder with name '{0}' for configuration '{1}' in compound '{2}'.</source>
        <target state="translated">複合 '{2}' の構成 '{1}' で、名前 '{0}' を含むフォルダーが見つかりませんでした。</target>
      </trans-unit>
      <trans-unit id="configMissing">
        <source xml:lang="en">Configuration '{0}' is missing in 'launch.json'.</source>
        <target state="translated">構成 '{0}' が 'launch.json' 内にありません。</target>
      </trans-unit>
      <trans-unit id="launchJsonDoesNotExist">
        <source xml:lang="en">'launch.json' does not exist.</source>
        <target state="translated">'launch.json' は存在しません。</target>
      </trans-unit>
      <trans-unit id="debugRequestNotSupported">
        <source xml:lang="en">Attribute '{0}' has an unsupported value '{1}' in the chosen debug configuration.</source>
        <target state="translated">選択しているデバッグ構成で '{0}' 属性はサポートされない値 '{1}' を指定しています。</target>
      </trans-unit>
      <trans-unit id="debugRequesMissing">
        <source xml:lang="en">Attribute '{0}' is missing from the chosen debug configuration.</source>
        <target state="translated">選択しているデバッグ構成に属性 '{0}' が含まれていません。</target>
      </trans-unit>
      <trans-unit id="debugTypeNotSupported">
        <source xml:lang="en">Configured debug type '{0}' is not supported.</source>
        <target state="translated">構成されているデバッグの種類 '{0}' はサポートされていません。</target>
      </trans-unit>
      <trans-unit id="debugTypeMissing">
        <source xml:lang="en">Missing property 'type' for the chosen launch configuration.</source>
        <target state="translated">選択された起動構成のプロパティ 'type' がありません。</target>
      </trans-unit>
      <trans-unit id="noFolderWorkspaceDebugError">
        <source xml:lang="en">The active file can not be debugged. Make sure it is saved and that you have a debug extension installed for that file type.</source>
        <target state="translated">アクティブなファイルをデバッグできません。そのファイルが保存されていることと、そのファイルの種類に対してデバッグ拡張機能がインストールされていることをご確認ください。</target>
      </trans-unit>
      <trans-unit id="debugAdapterCrash">
        <source xml:lang="en">Debug adapter process has terminated unexpectedly ({0})</source>
        <target state="translated">デバッグ アダプター プロセスが予期せず終了しました ({0})</target>
      </trans-unit>
      <trans-unit id="cancel">
        <source xml:lang="en">Cancel</source>
        <target state="translated">キャンセル</target>
      </trans-unit>
      <trans-unit id="debuggingPaused">
        <source xml:lang="en">Debugging paused {0}, {1} {2} {3}</source>
        <target state="translated">デバッグは一時停止されました {0}、{1} {2} {3}</target>
      </trans-unit>
      <trans-unit id="breakpointAdded">
        <source xml:lang="en">Added breakpoint, line {0}, file {1}</source>
        <target state="translated">ブレークポイントを追加しました。行 {0}、ファイル {1}</target>
      </trans-unit>
      <trans-unit id="breakpointRemoved">
        <source xml:lang="en">Removed breakpoint, line {0}, file {1}</source>
        <target state="translated">ブレークポイントを削除しました。行 {0}、ファイル {1}</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/common/debugModel" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="invalidVariableAttributes">
        <source xml:lang="en">Invalid variable attributes</source>
        <target state="translated">無効な変数属性</target>
      </trans-unit>
      <trans-unit id="startDebugFirst">
        <source xml:lang="en">Please start a debug session to evaluate expressions</source>
        <target state="translated">デバッグ セッションを開始して式を評価してください</target>
      </trans-unit>
      <trans-unit id="notAvailable">
        <source xml:lang="en">not available</source>
        <target state="translated">使用不可</target>
      </trans-unit>
      <trans-unit id="pausedOn">
        <source xml:lang="en">Paused on {0}</source>
        <target state="translated">{0} で一時停止</target>
        <note>indicates reason for program being paused</note>
      </trans-unit>
      <trans-unit id="paused">
        <source xml:lang="en">Paused</source>
        <target state="translated">一時停止</target>
      </trans-unit>
      <trans-unit id="running">
        <source xml:lang="en">Running</source>
        <target state="translated">実行しています</target>
        <note>indicates state</note>
      </trans-unit>
      <trans-unit id="breakpointDirtydHover">
        <source xml:lang="en">Unverified breakpoint. File is modified, please restart debug session.</source>
        <target state="translated">未確認のブレークポイント。ファイルは変更されているので、デバッグ セッションを再起動してください。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugTaskRunner" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="preLaunchTaskErrors">
        <source xml:lang="en">Errors exist after running preLaunchTask '{0}'.</source>
        <target state="translated">preLaunchTask '{0}' を実行後にエラーが存在します。</target>
      </trans-unit>
      <trans-unit id="preLaunchTaskError">
        <source xml:lang="en">Error exists after running preLaunchTask '{0}'.</source>
        <target state="translated">preLaunchTask '{0}' を実行後にエラーが存在します。</target>
      </trans-unit>
      <trans-unit id="preLaunchTaskExitCode">
        <source xml:lang="en">The preLaunchTask '{0}' terminated with exit code {1}.</source>
        <target state="translated">preLaunchTask '{0}' が終了コード {1} で終了しました。</target>
      </trans-unit>
      <trans-unit id="preLaunchTaskTerminated">
        <source xml:lang="en">The preLaunchTask '{0}' terminated.</source>
        <target state="translated">preLaunchTask '{0}' が終了しました。</target>
      </trans-unit>
      <trans-unit id="debugAnyway">
        <source xml:lang="en">Debug Anyway</source>
        <target state="translated">このままデバッグを続ける</target>
      </trans-unit>
      <trans-unit id="showErrors">
        <source xml:lang="en">Show Errors</source>
        <target state="translated">エラーの表示</target>
      </trans-unit>
      <trans-unit id="abort">
        <source xml:lang="en">Abort</source>
        <target state="translated">中止</target>
      </trans-unit>
      <trans-unit id="remember">
        <source xml:lang="en">Remember my choice in user settings</source>
        <target state="translated">ユーザー設定での自分の選択を覚えておいてください</target>
      </trans-unit>
      <trans-unit id="invalidTaskReference">
        <source xml:lang="en">Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.</source>
        <target state="translated">タスク '{0}' は、別のワークスペース フォルダーにあるため、起動構成からは参照できません。</target>
      </trans-unit>
      <trans-unit id="DebugTaskNotFoundWithTaskId">
        <source xml:lang="en">Could not find the task '{0}'.</source>
        <target state="translated">タスク '{0}' を見つけられませんでした。</target>
      </trans-unit>
      <trans-unit id="DebugTaskNotFound">
        <source xml:lang="en">Could not find the specified task.</source>
        <target state="translated">指定したタスクが見つかりませんでした。</target>
      </trans-unit>
      <trans-unit id="taskNotTrackedWithTaskId">
        <source xml:lang="en">The specified task cannot be tracked.</source>
        <target state="translated">指定したタスクを追跡できません。</target>
      </trans-unit>
      <trans-unit id="taskNotTracked">
        <source xml:lang="en">The task '{0}' cannot be tracked.</source>
        <target state="translated">タスク '{0}' を追跡できません。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugConfigurationManager" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="debugNoType">
        <source xml:lang="en">Debugger 'type' can not be omitted and must be of type 'string'.</source>
        <target state="translated">デバッガー 'type' は省略不可で、'string' 型でなければなりません。</target>
      </trans-unit>
      <trans-unit id="more">
        <source xml:lang="en">More...</source>
        <target state="translated">その他...</target>
      </trans-unit>
      <trans-unit id="selectDebug">
        <source xml:lang="en">Select Environment</source>
        <target state="translated">環境の選択</target>
      </trans-unit>
      <trans-unit id="DebugConfig.failed">
        <source xml:lang="en">Unable to create 'launch.json' file inside the '.vscode' folder ({0}).</source>
        <target state="translated">'launch.json' ファイルを '.vscode' フォルダー ({0}) 内に作成できません。</target>
      </trans-unit>
      <trans-unit id="workspace">
        <source xml:lang="en">workspace</source>
        <target state="translated">ワークスペース</target>
      </trans-unit>
      <trans-unit id="user settings">
        <source xml:lang="en">user settings</source>
        <target state="translated">ユーザー設定</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/debugSession" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="noDebugAdapter">
        <source xml:lang="en">No debug adapter, can not send '{0}'</source>
        <target state="translated">デバッグ アダプターが無いため、'{0}' を送信できません</target>
      </trans-unit>
      <trans-unit id="sessionNotReadyForBreakpoints">
        <source xml:lang="en">Session is not ready for breakpoints</source>
        <target state="translated">ブレークポイント用のセッションの準備が整っていません</target>
      </trans-unit>
      <trans-unit id="debuggingStarted">
        <source xml:lang="en">Debugging started.</source>
        <target state="translated">デバッグは開始されました。</target>
      </trans-unit>
      <trans-unit id="debuggingStopped">
        <source xml:lang="en">Debugging stopped.</source>
        <target state="translated">デバッグは停止されました。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/common/debugger" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="cannot.find.da">
        <source xml:lang="en">Cannot find debug adapter for type '{0}'.</source>
        <target state="translated">型 '{0}' のデバッグ アダプターを見つけることができません。</target>
      </trans-unit>
      <trans-unit id="launch.config.comment1">
        <source xml:lang="en">Use IntelliSense to learn about possible attributes.</source>
        <target state="translated">IntelliSense を使用して利用可能な属性を学べます。</target>
      </trans-unit>
      <trans-unit id="launch.config.comment2">
        <source xml:lang="en">Hover to view descriptions of existing attributes.</source>
        <target state="translated">既存の属性の説明をホバーして表示します。</target>
      </trans-unit>
      <trans-unit id="launch.config.comment3">
        <source xml:lang="en">For more information, visit: {0}</source>
        <target state="translated">詳細情報は次を確認してください: {0}</target>
      </trans-unit>
      <trans-unit id="debugType">
        <source xml:lang="en">Type of configuration.</source>
        <target state="translated">構成の種類。</target>
      </trans-unit>
      <trans-unit id="debugTypeNotRecognised">
        <source xml:lang="en">The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.</source>
        <target state="translated">デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。</target>
      </trans-unit>
      <trans-unit id="node2NotSupported">
        <source xml:lang="en">"node2" is no longer supported, use "node" instead and set the "protocol" attribute to "inspector".</source>
        <target state="translated">"node2" はサポートされていません。代わりに "node" を使用し、"protocol" 属性を "inspector" に設定してください。</target>
      </trans-unit>
      <trans-unit id="debugName">
        <source xml:lang="en">Name of configuration; appears in the launch configuration dropdown menu.</source>
        <target state="translated">構成の名前。起動構成ドロップダウン メニューに表示されます。</target>
      </trans-unit>
      <trans-unit id="debugRequest">
        <source xml:lang="en">Request type of configuration. Can be "launch" or "attach".</source>
        <target state="translated">構成の要求の種類。"launch" または "attach" です。</target>
      </trans-unit>
      <trans-unit id="debugServer">
        <source xml:lang="en">For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode</source>
        <target state="translated">デバッグ拡張機能の開発のみ。ポートが指定の VS Code の場合、サーバー モードで実行中のデバッグ アダプターへの接続が試行されます。</target>
      </trans-unit>
      <trans-unit id="debugPrelaunchTask">
        <source xml:lang="en">Task to run before debug session starts.</source>
        <target state="translated">デバッグ セッションの開始前に実行するタスク。</target>
      </trans-unit>
      <trans-unit id="debugPostDebugTask">
        <source xml:lang="en">Task to run after debug session ends.</source>
        <target state="translated">デバッグ セッションの終了前に実行するタスク。</target>
      </trans-unit>
      <trans-unit id="debugWindowsConfiguration">
        <source xml:lang="en">Windows specific launch configuration attributes.</source>
        <target state="translated">Windows 固有の起動構成の属性。</target>
      </trans-unit>
      <trans-unit id="debugOSXConfiguration">
        <source xml:lang="en">OS X specific launch configuration attributes.</source>
        <target state="translated">OS X 固有の起動構成の属性。</target>
      </trans-unit>
      <trans-unit id="debugLinuxConfiguration">
        <source xml:lang="en">Linux specific launch configuration attributes.</source>
        <target state="translated">Linux 固有の起動構成の属性。</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/browser/rawDebugSession" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="noDebugAdapterStart">
        <source xml:lang="en">No debug adapter, can not start debug session.</source>
        <target state="translated">デバッグ アダプターが無いため、デバッグ セッションを開始できません。</target>
      </trans-unit>
      <trans-unit id="noDebugAdapter">
        <source xml:lang="en">No debug adapter found. Can not send '{0}'.</source>
        <target state="translated">デバッグ アダプターが見つかりません。'{0}' を送信できません。</target>
      </trans-unit>
      <trans-unit id="moreInfo">
        <source xml:lang="en">More Info</source>
        <target state="translated">詳細情報</target>
      </trans-unit>
    </body>
  </file>
  <file original="src/vs/workbench/contrib/debug/common/debugSchemas" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="vscode.extension.contributes.debuggers">
        <source xml:lang="en">Contributes debug adapters.</source>
        <target state="translated">デバッグ アダプターを提供します。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.type">
        <source xml:lang="en">Unique identifier for this debug adapter.</source>
        <target state="translated">このデバッグ アダプターの一意識別子。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.label">
        <source xml:lang="en">Display name for this debug adapter.</source>
        <target state="translated">このデバッグ アダプターの表示名。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.program">
        <source xml:lang="en">Path to the debug adapter program. Path is either absolute or relative to the extension folder.</source>
        <target state="translated">デバッグ アダプター プログラムへのパス。絶対パスか拡張機能フォルダーへの相対パスです。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.args">
        <source xml:lang="en">Optional arguments to pass to the adapter.</source>
        <target state="translated">アダプターに渡すオプションの引数。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.runtime">
        <source xml:lang="en">Optional runtime in case the program attribute is not an executable but requires a runtime.</source>
        <target state="translated">プログラム属性が実行可能でなく、ランタイムが必要な場合のオプション ランタイム。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.runtimeArgs">
        <source xml:lang="en">Optional runtime arguments.</source>
        <target state="translated">オプションのランタイム引数。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.variables">
        <source xml:lang="en">Mapping from interactive variables (e.g. ${action.pickProcess}) in `launch.json` to a command.</source>
        <target state="translated">`launch.json` 内の対話型の変数 (例: ${action.pickProcess}) からコマンドへマッピングしています。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.initialConfigurations">
        <source xml:lang="en">Configurations for generating the initial 'launch.json'.</source>
        <target state="translated">初期 'launch.json' を生成するための構成。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.languages">
        <source xml:lang="en">List of languages for which the debug extension could be considered the "default debugger".</source>
        <target state="translated">デバッグ拡張機能が "既定のデバッガー" とされる言語の一覧。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.configurationSnippets">
        <source xml:lang="en">Snippets for adding new configurations in 'launch.json'.</source>
        <target state="translated">'launch.json' に新しい構成を追加するためのスニペット。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.configurationAttributes">
        <source xml:lang="en">JSON schema configurations for validating 'launch.json'.</source>
        <target state="translated">'launch.json' を検証するための JSON スキーマ構成。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.windows">
        <source xml:lang="en">Windows specific settings.</source>
        <target state="translated">Windows 固有の設定。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.windows.runtime">
        <source xml:lang="en">Runtime used for Windows.</source>
        <target state="translated">Windows で使用されるランタイム。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.osx">
        <source xml:lang="en">macOS specific settings.</source>
        <target state="translated">macOS 固有の設定。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.osx.runtime">
        <source xml:lang="en">Runtime used for macOS.</source>
        <target state="translated">macOS で使用されるランタイム。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.linux">
        <source xml:lang="en">Linux specific settings.</source>
        <target state="translated">Linux 固有の設定。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.debuggers.linux.runtime">
        <source xml:lang="en">Runtime used for Linux.</source>
        <target state="translated">Linux で使用されるランタイム。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.breakpoints">
        <source xml:lang="en">Contributes breakpoints.</source>
        <target state="translated">ブレークポイントを提供します。</target>
      </trans-unit>
      <trans-unit id="vscode.extension.contributes.breakpoints.language">
        <source xml:lang="en">Allow breakpoints for this language.</source>
        <target state="translated">この言語でブレークポイントを許可します。</target>
      </trans-unit>
      <trans-unit id="presentation">
        <source xml:lang="en">Presentation options on how to show this configuration in the debug configuration dropdown and the command palette.</source>
        <target state="translated">デバッグ構成ドロップダウンとコマンド パレットでこの構成を表示する方法に関するプレゼンテーション オプション。</target>
      </trans-unit>
      <trans-unit id="presentation.hidden">
        <source xml:lang="en">Controls if this configuration should be shown in the configuration dropdown and the command palette.</source>
        <target state="translated">この構成を構成ドロップダウンとコマンド パレットに表示するかどうかを制御します。</target>
      </trans-unit>
      <trans-unit id="presentation.group">
        <source xml:lang="en">Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette.</source>
        <target state="translated">この構成が属するグループ。構成ドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。</target>
      </trans-unit>
      <trans-unit id="presentation.order">
        <source xml:lang="en">Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette.</source>
        <target state="translated">グループ内でのこの構成の順序。[構成] のドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。</target>
      </trans-unit>
      <trans-unit id="app.launch.json.title">
        <source xml:lang="en">Launch</source>
        <target state="translated">起動</target>
      </trans-unit>
      <trans-unit id="app.launch.json.version">
        <source xml:lang="en">Version of this file format.</source>
        <target state="translated">このファイル形式のバージョン。</target>
      </trans-unit>
      <trans-unit id="app.launch.json.configurations">
        <source xml:lang="en">List of configurations. Add new configurations or edit existing ones by using IntelliSense.</source>
        <target state="translated">構成の一覧。IntelliSense を使用して、新しい構成を追加したり、既存の構成を編集したります。</target>
      </trans-unit>
      <trans-unit id="app.launch.json.compounds">
        <source xml:lang="en">List of compounds. Each compound references multiple configurations which will get launched together.</source>
        <target state="translated">複合の一覧。各複合は、同時に起動される複数の構成を参照します。</target>
      </trans-unit>
      <trans-unit id="app.launch.json.compound.name">
        <source xml:lang="en">Name of compound. Appears in the launch configuration drop down menu.</source>
        <target state="translated">複合の名前。起動構成のドロップダウン メニューに表示されます。</target>
      </trans-unit>
      <trans-unit id="useUniqueNames">
        <source xml:lang="en">Please use unique configuration names.</source>
        <target state="translated">一意の構成名を使用してください。</target>
      </trans-unit>
      <trans-unit id="app.launch.json.compound.folder">
        <source xml:lang="en">Name of folder in which the compound is located.</source>
        <target state="translated">複合があるフォルダーの名前。</target>
      </trans-unit>
      <trans-unit id="app.launch.json.compounds.configurations">
        <source xml:lang="en">Names of configurations that will be started as part of this compound.</source>
        <target state="translated">この複合の一部として開始される構成の名前。</target>
      </trans-unit>
      <trans-unit id="compoundPrelaunchTask">
        <source xml:lang="en">Task to run before any of the compound configurations start.</source>
        <target state="translated">複合構成の開始前に実行するタスク。</target>
      </trans-unit>
    </body>
  </file>
</xliff>