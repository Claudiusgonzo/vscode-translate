<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="extensions/ms-vscode.node-debug/package" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="extension.description">
        <source xml:lang="en">Node.js debugging support (versions &lt; 8.0)</source>
        <target state="translated">Node.js デバッグ サポート（バージョン 8.0 未満）</target>
      </trans-unit>
      <trans-unit id="node.label">
        <source xml:lang="en">Node.js</source>
        <target state="translated">Node.js</target>
      </trans-unit>
      <trans-unit id="open.loaded.script">
        <source xml:lang="en">Open Loaded Script</source>
        <target state="translated">読み込み済みのスクリプトを開く</target>
      </trans-unit>
      <trans-unit id="attach.node.process">
        <source xml:lang="en">Attach to Node Process</source>
        <target state="translated">Node のプロセスにアタッチ</target>
      </trans-unit>
      <trans-unit id="toggle.skipping.this.file">
        <source xml:lang="en">Toggle Skipping this File</source>
        <target state="translated">このファイルをスキップする</target>
      </trans-unit>
      <trans-unit id="start.with.stop.on.entry">
        <source xml:lang="en">Start Debugging and Stop on Entry</source>
        <target state="translated">デバッグを開始して、エントリで停止する</target>
      </trans-unit>
      <trans-unit id="smartStep.description">
        <source xml:lang="en">Automatically step through generated code that cannot be mapped back to the original source.</source>
        <target state="translated">元のソースにマップし直すことができない、生成されたコードを自動的にステップ スルーします。</target>
      </trans-unit>
      <trans-unit id="skipFiles.description">
        <source xml:lang="en">An array of glob patterns for files to skip when debugging. The pattern `&lt;node_internals&gt;/**` matches all internal Node.js modules.</source>
        <target state="translated">デバッグ時にスキップするファイルの glob パターンの配列。パターン `&lt;node_internals&gt;/**` はすべての内部 Node.js モジュールに一致します。</target>
      </trans-unit>
      <trans-unit id="outFiles.description">
        <source xml:lang="en">If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.  Example: ["${workspaceFolder}/out/**/*.js"]</source>
        <target state="translated">ソース マップを有効にすると、これらの glob パターンは生成した JavaScript ファイルを指定します。パターンが '!' で始まる場合は、ファイルは除外されます。指定しない場合は、生成されたコードはそのソースと同じディレクトリ内にあると想定されます。例: ["${workspaceFolder}/out/**/*.js"]</target>
      </trans-unit>
      <trans-unit id="outDir.deprecationMessage">
        <source xml:lang="en">Attribute 'outDir' is deprecated, use 'outFiles' instead.</source>
        <target state="translated">属性 'outDir' は非推奨です。代わりに 'outFiles' を使用してください。</target>
      </trans-unit>
      <trans-unit id="trace.description">
        <source xml:lang="en">Produce diagnostic output. Instead of setting this to true you can list one or more selectors separated with commas. The 'verbose' selector enables very detailed output.</source>
        <target state="translated">診断出力を生成します。これを true に設定する代わりに、コンマで区切られた 1 つ以上のセレクターの一覧を作成することができます。'verbose' セレクターにより、非常に詳細な出力が生成されます。</target>
      </trans-unit>
      <trans-unit id="launch.args.description">
        <source xml:lang="en">Command line arguments passed to the program.</source>
        <target state="translated">プログラムに渡されるコマンド ライン引数。</target>
      </trans-unit>
      <trans-unit id="debug.node.showUseWslIsDeprecatedWarning.description">
        <source xml:lang="en">Controls whether to show a warning when the 'useWSL' attribute is used.</source>
        <target state="translated">'useWSL' 属性を使用するときに警告を表示するかどうかを制御します。</target>
      </trans-unit>
      <trans-unit id="debug.node.useV3.description">
        <source xml:lang="en">[Experimental] Controls whether to delegate "node"-type launch configs to the js-debug extension.</source>
        <target state="translated">[試験段階] "node" 型の起動構成ファイルを js-debug 拡張機能にデリゲートするかどうかを制御します。</target>
      </trans-unit>
      <trans-unit id="debug.extensionHost.useV3.description">
        <source xml:lang="en">[Experimental] Controls whether to delegate "extensionHost"-type launch configs to the js-debug extension.</source>
        <target state="translated">[試験段階] "extensionHost" 型の起動構成ファイルを js-debug 拡張機能にデリゲートするかどうかを制御します。</target>
      </trans-unit>
      <trans-unit id="node.protocol.description">
        <source xml:lang="en">Node.js debug protocol to use.</source>
        <target state="translated">使用する Node.js デバッグ プロトコルです。</target>
      </trans-unit>
      <trans-unit id="node.protocol.auto.description">
        <source xml:lang="en">Try to detect the best protocol automatically, selecting 'inspector' for launching Node 8.0+</source>
        <target state="translated">最適なプロトコルを自動的に検出しようとします。Node 8.0 以上の起動には 'inspector' を選択します。</target>
      </trans-unit>
      <trans-unit id="node.protocol.inspector.description">
        <source xml:lang="en">New protocol supported by Node.js versions &gt;= 6.3</source>
        <target state="translated">Node.js バージョン 6.3 以上でサポートされる新しいプロトコル</target>
      </trans-unit>
      <trans-unit id="node.protocol.legacy.description">
        <source xml:lang="en">Old protocol supported by Node.js versions &lt; 8.0</source>
        <target state="translated">Node.js バージョン 8.0 未満でサポートされている古いプロトコル</target>
      </trans-unit>
      <trans-unit id="node.sourceMaps.description">
        <source xml:lang="en">Use JavaScript source maps (if they exist).</source>
        <target state="translated">JavaScript ソース マップを使用します (存在する場合)。</target>
      </trans-unit>
      <trans-unit id="node.stopOnEntry.description">
        <source xml:lang="en">Automatically stop program after launch.</source>
        <target state="translated">起動後、プログラムを自動的に停止します。</target>
      </trans-unit>
      <trans-unit id="node.port.description">
        <source xml:lang="en">Debug port to attach to. Default is 5858.</source>
        <target state="translated">添付先のデバッグ ポート。既定は 5858 です。</target>
      </trans-unit>
      <trans-unit id="node.address.description">
        <source xml:lang="en">TCP/IP address of process to be debugged (for Node.js &gt;= 5.0 only). Default is 'localhost'.</source>
        <target state="translated">デバッグ対象のプロセスの TCP/IP アドレス (Node.js 5.0 以上の場合のみ)。既定値は 'localhost' です。</target>
      </trans-unit>
      <trans-unit id="node.timeout.description">
        <source xml:lang="en">Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.</source>
        <target state="translated">このミリ秒の間、Node.js への接続を再試行します。既定値は 10000 ミリ秒です。</target>
      </trans-unit>
      <trans-unit id="node.restart.description">
        <source xml:lang="en">Restart session after Node.js has terminated.</source>
        <target state="translated">Node.js が終了した後、セッションを再開します。</target>
      </trans-unit>
      <trans-unit id="node.localRoot.description">
        <source xml:lang="en">Path to the local directory containing the program.</source>
        <target state="translated">プログラムの入ったローカル ディレクトリへのパス。</target>
      </trans-unit>
      <trans-unit id="node.remoteRoot.description">
        <source xml:lang="en">Absolute path to the remote directory containing the program.</source>
        <target state="translated">プログラムの入ったリモート ディレクトリへの絶対パス。</target>
      </trans-unit>
      <trans-unit id="node.showAsyncStacks.description">
        <source xml:lang="en">Show the async calls that led to the current call stack. 'inspector' protocol only.</source>
        <target state="translated">現在の呼び出し履歴の原因となった非同期呼び出しを表示します。'inspector' プロトコルのみ。</target>
      </trans-unit>
      <trans-unit id="node.sourceMapPathOverrides.description">
        <source xml:lang="en">A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.</source>
        <target state="translated">ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。</target>
      </trans-unit>
      <trans-unit id="node.disableOptimisticBPs.description">
        <source xml:lang="en">Don't set breakpoints in any file until a sourcemap has been loaded for that file.</source>
        <target state="translated">そのファイルのソースマップが読み込み終わるまで、ファイル内にブレークポイントを設定しません。</target>
      </trans-unit>
      <trans-unit id="node.launch.program.description">
        <source xml:lang="en">Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.</source>
        <target state="translated">プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。</target>
      </trans-unit>
      <trans-unit id="node.launch.externalConsole.deprecationMessage">
        <source xml:lang="en">Attribute 'externalConsole' is deprecated, use 'console' instead.</source>
        <target state="translated">属性 'externalConsole' は非推奨です。代わりに 'console' を使用してください。</target>
      </trans-unit>
      <trans-unit id="node.launch.console.description">
        <source xml:lang="en">Where to launch the debug target.</source>
        <target state="translated">デバッグ ターゲットの起動場所です。</target>
      </trans-unit>
      <trans-unit id="node.launch.console.internalConsole.description">
        <source xml:lang="en">VS Code Debug Console (which doesn't support to read input from a program)</source>
        <target state="translated">VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)</target>
      </trans-unit>
      <trans-unit id="node.launch.console.integratedTerminal.description">
        <source xml:lang="en">VS Code's integrated terminal</source>
        <target state="translated">VS Code の統合ターミナルです</target>
      </trans-unit>
      <trans-unit id="node.launch.console.externalTerminal.description">
        <source xml:lang="en">External terminal that can be configured via user settings</source>
        <target state="translated">ユーザー設定を介して構成できる外部ターミナルです</target>
      </trans-unit>
      <trans-unit id="node.launch.cwd.description">
        <source xml:lang="en">Absolute path to the working directory of the program being debugged.</source>
        <target state="translated">デバッグされるプログラムの作業ディレクトリへの絶対パス。</target>
      </trans-unit>
      <trans-unit id="node.launch.runtimeExecutable.description">
        <source xml:lang="en">Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.</source>
        <target state="translated">使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。</target>
      </trans-unit>
      <trans-unit id="node.launch.runtimeArgs.description">
        <source xml:lang="en">Optional arguments passed to the runtime executable.</source>
        <target state="translated">ランタイム実行可能ファイルに渡される省略可能な引数。</target>
      </trans-unit>
      <trans-unit id="node.launch.runtimeVersion.description">
        <source xml:lang="en">Version of `node` runtime to use. Requires `nvm`.</source>
        <target state="translated">使用する `node` ランタイムのバージョン。`nvm` が必要です。</target>
      </trans-unit>
      <trans-unit id="node.launch.env.description">
        <source xml:lang="en">Environment variables passed to the program. The value `null` removes the variable from the environment.</source>
        <target state="translated">プログラムに渡される環境変数。`null` 値は環境変数から変数を削除します。</target>
      </trans-unit>
      <trans-unit id="node.launch.envFile.description">
        <source xml:lang="en">Absolute path to a file containing environment variable definitions.</source>
        <target state="translated">環境変数の定義を含むファイルへの絶対パス。</target>
      </trans-unit>
      <trans-unit id="node.launch.useWSL.description">
        <source xml:lang="en">Use Windows Subsystem for Linux.</source>
        <target state="translated">Windows Subsystem for Linux を使用します。</target>
      </trans-unit>
      <trans-unit id="node.launch.useWSL.deprecation">
        <source xml:lang="en">'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead.</source>
        <target state="translated">'useWSL' は廃止され、サポートが終了されます。代わりに 'Remote - WSL' 拡張機能を使用します。</target>
      </trans-unit>
      <trans-unit id="node.launch.outputCapture.description">
        <source xml:lang="en">From where to capture output messages: The debug API, or stdout/stderr streams.</source>
        <target state="translated">出力メッセージのキャプチャ場所: debug API, stdout/stderr ストリーム</target>
      </trans-unit>
      <trans-unit id="node.launch.autoAttachChildProcesses.description">
        <source xml:lang="en">Attach debugger to new child processes automatically.</source>
        <target state="translated">デバッガーを自動的に新しい子プロセスにアタッチします。</target>
      </trans-unit>
      <trans-unit id="node.launch.config.name">
        <source xml:lang="en">Launch</source>
        <target state="translated">起動</target>
      </trans-unit>
      <trans-unit id="node.attach.processId.description">
        <source xml:lang="en">ID of process to attach to.</source>
        <target state="translated">アタッチ先のプロセスの ID。</target>
      </trans-unit>
      <trans-unit id="node.attach.config.name">
        <source xml:lang="en">Attach</source>
        <target state="translated">アタッチ</target>
      </trans-unit>
      <trans-unit id="node.processattach.config.name">
        <source xml:lang="en">Attach to Process</source>
        <target state="translated">プロセスにアタッチ</target>
      </trans-unit>
      <trans-unit id="node.snippet.launch.label">
        <source xml:lang="en">Node.js: Launch Program</source>
        <target state="translated">Node.js: プログラムの起動</target>
      </trans-unit>
      <trans-unit id="node.snippet.launch.description">
        <source xml:lang="en">Launch a node program in debug mode</source>
        <target state="translated">ノード プログラムをデバッグ モードで起動します</target>
      </trans-unit>
      <trans-unit id="node.snippet.npm.label">
        <source xml:lang="en">Node.js: Launch via NPM</source>
        <target state="translated">Node.js: NPM による起動</target>
      </trans-unit>
      <trans-unit id="node.snippet.npm.description">
        <source xml:lang="en">Launch a node program through an npm `debug` script</source>
        <target state="translated">npm の `debug` スクリプトにより Node プログラムを起動します</target>
      </trans-unit>
      <trans-unit id="node.snippet.attach.label">
        <source xml:lang="en">Node.js: Attach</source>
        <target state="translated">Node.js: アタッチ</target>
      </trans-unit>
      <trans-unit id="node.snippet.attach.description">
        <source xml:lang="en">Attach to a running node program</source>
        <target state="translated">実行中のノード プログラムにアタッチします</target>
      </trans-unit>
      <trans-unit id="node.snippet.remoteattach.label">
        <source xml:lang="en">Node.js: Attach to Remote Program</source>
        <target state="translated">Node.js: リモート プログラムにアタッチする</target>
      </trans-unit>
      <trans-unit id="node.snippet.remoteattach.description">
        <source xml:lang="en">Attach to the debug port of a remote node program</source>
        <target state="translated">リモート ノード プログラムのデバッグ ポートにアタッチします</target>
      </trans-unit>
      <trans-unit id="node.snippet.attachProcess.label">
        <source xml:lang="en">Node.js: Attach to Process</source>
        <target state="translated">Node.js: プロセスへのアタッチ</target>
      </trans-unit>
      <trans-unit id="node.snippet.attachProcess.description">
        <source xml:lang="en">Open process picker to select node process to attach to</source>
        <target state="translated">プロセス ピッカーを開いて、アタッチ先の node プロセスを選択します</target>
      </trans-unit>
      <trans-unit id="node.snippet.nodemon.label">
        <source xml:lang="en">Node.js: Nodemon Setup</source>
        <target state="translated">Node.js: nodemon のセットアップ</target>
      </trans-unit>
      <trans-unit id="node.snippet.nodemon.description">
        <source xml:lang="en">Use nodemon to relaunch a debug session on source changes</source>
        <target state="translated">nodemon を使用してソース変更時にデバッグ セッションを再起動します</target>
      </trans-unit>
      <trans-unit id="node.snippet.mocha.label">
        <source xml:lang="en">Node.js: Mocha Tests</source>
        <target state="translated">Node.js: Mocha テスト</target>
      </trans-unit>
      <trans-unit id="node.snippet.mocha.description">
        <source xml:lang="en">Debug mocha tests</source>
        <target state="translated">Mocha テストをデバッグします</target>
      </trans-unit>
      <trans-unit id="node.snippet.yo.label">
        <source xml:lang="en">Node.js: Yeoman generator</source>
        <target state="translated">Node.js: Yeoman ジェネレーター</target>
      </trans-unit>
      <trans-unit id="node.snippet.yo.description">
        <source xml:lang="en">Debug yeoman generator (install by running `npm link` in project folder)</source>
        <target state="translated">yeoman ジェネレーターをデバッグします (プロジェクト フォルダーで `npm link` を実行してインストールします)</target>
      </trans-unit>
      <trans-unit id="node.snippet.gulp.label">
        <source xml:lang="en">Node.js: Gulp task</source>
        <target state="translated">Node.js: Gulp タスク</target>
      </trans-unit>
      <trans-unit id="node.snippet.gulp.description">
        <source xml:lang="en">Debug gulp task (make sure to have a local gulp installed in your project)</source>
        <target state="translated">gulp タスクをデバッグします (プロジェクトにローカルの gulp がインストールされていることを確認します)</target>
      </trans-unit>
      <trans-unit id="node.snippet.electron.label">
        <source xml:lang="en">Node.js: Electron Main</source>
        <target state="translated">Node.js: Electron (メイン)</target>
      </trans-unit>
      <trans-unit id="node.snippet.electron.description">
        <source xml:lang="en">Debug the Electron main process</source>
        <target state="translated">Electron のメイン プロセスをデバッグします</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/ms-vscode.node-debug/dist/node/nodeDebug" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="setVariable.error">
        <source xml:lang="en">Setting value not supported</source>
        <target state="translated">設定値がサポートされていません</target>
      </trans-unit>
      <trans-unit id="exception.paused.promise.rejection">
        <source xml:lang="en">Paused on Promise Rejection</source>
        <target state="translated">Promise の失敗で一時停止</target>
      </trans-unit>
      <trans-unit id="exception.promise.rejection.text">
        <source xml:lang="en">Promise Rejection ({0})</source>
        <target state="translated">Promise の失敗 ({0})</target>
      </trans-unit>
      <trans-unit id="exception.promise.rejection">
        <source xml:lang="en">Promise Rejection</source>
        <target state="translated">Promise の失敗</target>
      </trans-unit>
      <trans-unit id="reason.description.step">
        <source xml:lang="en">Paused on step</source>
        <target state="translated">ステップで一時停止</target>
      </trans-unit>
      <trans-unit id="reason.description.breakpoint">
        <source xml:lang="en">Paused on breakpoint</source>
        <target state="translated">ブレークポイントで一時停止</target>
      </trans-unit>
      <trans-unit id="reason.description.exception">
        <source xml:lang="en">Paused on exception</source>
        <target state="translated">例外で一時停止</target>
      </trans-unit>
      <trans-unit id="reason.description.user_request">
        <source xml:lang="en">Paused on user request</source>
        <target state="translated">ユーザーの要求で一時停止</target>
      </trans-unit>
      <trans-unit id="reason.description.entry">
        <source xml:lang="en">Paused on entry</source>
        <target state="translated">エントリで一時停止</target>
      </trans-unit>
      <trans-unit id="reason.description.debugger_statement">
        <source xml:lang="en">Paused on debugger statement</source>
        <target state="translated">デバッガー ステートメントで一時停止</target>
      </trans-unit>
      <trans-unit id="reason.description.restart">
        <source xml:lang="en">Paused on frame entry</source>
        <target state="translated">フレーム エントリで一時停止</target>
      </trans-unit>
      <trans-unit id="exceptions.all">
        <source xml:lang="en">All Exceptions</source>
        <target state="translated">すべての例外</target>
      </trans-unit>
      <trans-unit id="exceptions.uncaught">
        <source xml:lang="en">Uncaught Exceptions</source>
        <target state="translated">キャッチされない例外</target>
      </trans-unit>
      <trans-unit id="exceptions.rejects">
        <source xml:lang="en">Promise Rejects</source>
        <target state="translated">Promise が失敗</target>
      </trans-unit>
      <trans-unit id="VSND2028">
        <source xml:lang="en">Unknown console type '{0}'.</source>
        <target state="translated">不明なコンソールの種類 '{0}'.</target>
      </trans-unit>
      <trans-unit id="attribute.wls.not.exist">
        <source xml:lang="en">Cannot find Windows Subsystem Linux installation</source>
        <target state="translated">Windows Subsystem Linux のインストールが見つかりません</target>
      </trans-unit>
      <trans-unit id="VSND2001">
        <source xml:lang="en">Cannot find runtime '{0}' on PATH. Make sure to have '{0}' installed.</source>
        <target state="translated">PATH 上で '{0}' のランタイムが見つかりません。'{0}' がインストールされていることを確認してください。</target>
      </trans-unit>
      <trans-unit id="program.path.case.mismatch.warning">
        <source xml:lang="en">Program path uses differently cased character as file on disk; this might result in breakpoints not being hit.</source>
        <target state="translated">プログラム パスで使用されている文字と、ディスク上のファイルの文字の間で大文字と小文字が異なっています。ブレークポイントがヒットしない可能性があります。</target>
      </trans-unit>
      <trans-unit id="VSND2002">
        <source xml:lang="en">Cannot launch program '{0}'; configuring source maps might help.</source>
        <target state="translated">プログラム '{0}' を起動できません。ソース マップを構成すると役立つ場合があります。</target>
      </trans-unit>
      <trans-unit id="VSND2009">
        <source xml:lang="en">Cannot launch program '{0}' because corresponding JavaScript cannot be found.</source>
        <target state="translated">対応する JavaScript が見つからないため、プログラム '{0}' を起動できません。</target>
      </trans-unit>
      <trans-unit id="VSND2003">
        <source xml:lang="en">Cannot launch program '{0}'; setting the '{1}' attribute might help.</source>
        <target state="translated">プログラム '{0}' を起動できません。'{1}' 属性を設定すると役立つ可能性があります。</target>
      </trans-unit>
      <trans-unit id="VSND2029">
        <source xml:lang="en">Can't load environment variables from file ({0}).</source>
        <target state="translated">ファイル ({0}) から環境変数を読み込むことができません。</target>
      </trans-unit>
      <trans-unit id="node.console.title">
        <source xml:lang="en">Node Debug Console</source>
        <target state="translated">Node デバッグ コンソール</target>
      </trans-unit>
      <trans-unit id="VSND2011">
        <source xml:lang="en">Cannot launch debug target in terminal ({0}).</source>
        <target state="translated">ターミナル ({0}) でデバッグ ターゲットを起動できません。</target>
      </trans-unit>
      <trans-unit id="VSND2017">
        <source xml:lang="en">Cannot launch debug target ({0}).</source>
        <target state="translated">デバッグ ターゲット ({0}) を起動できません。</target>
      </trans-unit>
      <trans-unit id="VSND2010">
        <source xml:lang="en">Cannot connect to runtime process (reason: {0}).</source>
        <target state="translated">ランタイム プロセスに接続できません (理由: {0})。</target>
      </trans-unit>
      <trans-unit id="VSND2033">
        <source xml:lang="en">Cannot connect to runtime; make sure that runtime is in 'legacy' debug mode.</source>
        <target state="translated">ランタイムに接続できません。ランタイムが 'レガシ' デバッグ モードであることを確認してください。</target>
      </trans-unit>
      <trans-unit id="VSND2034">
        <source xml:lang="en">Cannot connect to runtime via 'legacy' protocol; try to use 'inspector' protocol.</source>
        <target state="translated">'legacy' プロトコルを介してランタイムに接続できません。'inspector' プロトコルを使用してください。</target>
      </trans-unit>
      <trans-unit id="file.on.disk.changed">
        <source xml:lang="en">Unverified because file on disk has changed. Please restart debug session.</source>
        <target state="translated">ディスク上のファイルが変更されているため検証されませんでした。デバッグ セッションを再開してください。</target>
      </trans-unit>
      <trans-unit id="VSND2019">
        <source xml:lang="en">Internal module {0} not found.</source>
        <target state="translated">内部モジュール {0} が見つかりません。</target>
      </trans-unit>
      <trans-unit id="sourcemapping.fail.message">
        <source xml:lang="en">Breakpoint ignored because generated code not found (source map problem?).</source>
        <target state="translated">生成されたコードが見つからないので、ブレークポイントが無視されました (ソース マップの問題?)。</target>
      </trans-unit>
      <trans-unit id="VSND2022">
        <source xml:lang="en">No call stack because program paused outside of JavaScript.</source>
        <target state="translated">プログラムが JavaScript の外部で一時停止したため、呼び出し履歴はありません。</target>
      </trans-unit>
      <trans-unit id="VSND2023">
        <source xml:lang="en">No call stack available.</source>
        <target state="translated">利用できる呼び出し履歴はありません。</target>
      </trans-unit>
      <trans-unit id="VSND2018">
        <source xml:lang="en">No call stack available ({_command}: {_error}).</source>
        <target state="translated">利用できる呼び出し履歴はありません ({_command}: {_error})。</target>
      </trans-unit>
      <trans-unit id="origin.from.node">
        <source xml:lang="en">read-only content from Node.js</source>
        <target state="translated">Node.js からの読み取り専用コンテンツ</target>
      </trans-unit>
      <trans-unit id="origin.from.remote.node">
        <source xml:lang="en">read-only content from remote Node.js</source>
        <target state="translated">リモート Node.js からの読み取り専用コンテンツ</target>
      </trans-unit>
      <trans-unit id="origin.core.module">
        <source xml:lang="en">read-only core module</source>
        <target state="translated">読み取り専用のコア モジュール</target>
      </trans-unit>
      <trans-unit id="source.skipFiles">
        <source xml:lang="en">skipped due to 'skipFiles'</source>
        <target state="translated">'skipFiles' のためにスキップされました</target>
      </trans-unit>
      <trans-unit id="source.smartstep">
        <source xml:lang="en">skipped due to 'smartStep'</source>
        <target state="translated">'smartStep' のためにスキップされました</target>
      </trans-unit>
      <trans-unit id="origin.inlined.source.map">
        <source xml:lang="en">read-only inlined content from source map</source>
        <target state="translated">ソース マップからの読み取り専用のインライン化されたコンテンツ</target>
      </trans-unit>
      <trans-unit id="anonymous.function">
        <source xml:lang="en">(anonymous function)</source>
        <target state="translated">(匿名関数)</target>
      </trans-unit>
      <trans-unit id="scope.local.with.count">
        <source xml:lang="en">Local ({0} of {1})</source>
        <target state="translated">ローカル ({1} の {0})</target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
      <trans-unit id="scope.unknown">
        <source xml:lang="en">Unknown Scope Type: {0}</source>
        <target state="translated">不明なスコープの種類: {0}</target>
      </trans-unit>
      <trans-unit id="scope.exception">
        <source xml:lang="en">Exception</source>
        <target state="translated">例外</target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
      <trans-unit id="eval.not.available">
        <source xml:lang="en">not available</source>
        <target state="translated">使用不可</target>
      </trans-unit>
      <trans-unit id="eval.invalid.expression">
        <source xml:lang="en">invalid expression: {0}</source>
        <target state="translated">正しくない式: {0}</target>
      </trans-unit>
      <trans-unit id="source.not.found">
        <source xml:lang="en">Could not retrieve content.</source>
        <target state="translated">コンテンツを取得できませんでした。</target>
      </trans-unit>
      <trans-unit id="attribute.path.not.exist">
        <source xml:lang="en">Attribute '{0}' does not exist ('{1}').</source>
        <target state="translated">属性 '{0}' が存在しません ('{1}')。</target>
      </trans-unit>
      <trans-unit id="attribute.path.not.absolute">
        <source xml:lang="en">Attribute '{0}' is not absolute ('{1}'); consider adding '{2}' as a prefix to make it absolute.</source>
        <target state="translated">属性 '{0}' が絶対 ('{1}') ではありません。絶対的なものにするには、プレフィックスとして '{2}' を追加することを考慮してください。</target>
      </trans-unit>
      <trans-unit id="more.information">
        <source xml:lang="en">More Information</source>
        <target state="translated">詳細情報</target>
      </trans-unit>
      <trans-unit id="VSND2015">
        <source xml:lang="en">Request '{_request}' was cancelled because Node.js is unresponsive.</source>
        <target state="translated">Node.js が応答しないため、要求 '{_request}' がキャンセルされました。</target>
      </trans-unit>
      <trans-unit id="VSND2016">
        <source xml:lang="en">Node.js did not respond to request '{_request}' in a reasonable amount of time.</source>
        <target state="translated">Node.js は適切な期間内に要求 '{_request}' に応答しませんでした。</target>
      </trans-unit>
      <trans-unit id="scope.global">
        <source xml:lang="en">Global</source>
        <target state="translated">GLOBAL</target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
      <trans-unit id="scope.local">
        <source xml:lang="en">Local</source>
        <target state="translated">LOCAL</target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
      <trans-unit id="scope.with">
        <source xml:lang="en">With</source>
        <target state="translated">使用</target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
      <trans-unit id="scope.closure">
        <source xml:lang="en">Closure</source>
        <target state="translated">クロージャ</target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
      <trans-unit id="scope.catch">
        <source xml:lang="en">Catch</source>
        <target state="translated">Catch</target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
      <trans-unit id="scope.block">
        <source xml:lang="en">Block</source>
        <target state="translated">ブロック </target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
      <trans-unit id="scope.script">
        <source xml:lang="en">Script</source>
        <target state="translated">スクリプト</target>
        <note>https://github.com/Microsoft/vscode/issues/4569</note>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/ms-vscode.node-debug/dist/node/nodeV8Protocol" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="not.connected">
        <source xml:lang="en">not connected to runtime</source>
        <target state="translated">ランタイムに接続していません</target>
      </trans-unit>
      <trans-unit id="runtime.unresponsive">
        <source xml:lang="en">cancelled because Node.js is unresponsive</source>
        <target state="translated">Node.js が応答しないため、キャンセルされました</target>
      </trans-unit>
      <trans-unit id="runtime.timeout">
        <source xml:lang="en">timeout after {0} ms</source>
        <target state="translated">{0} ミリ秒後にタイムアウト</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/ms-vscode.node-debug/dist/node/extension/autoAttach" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="process.with.pid.label">
        <source xml:lang="en">Auto attached ({0})</source>
        <target state="translated">自動アタッチ ({0})</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/ms-vscode.node-debug/dist/node/extension/cluster" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="child.process.with.pid.label">
        <source xml:lang="en">Child process {0}</source>
        <target state="translated">子プロセス {0}</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/ms-vscode.node-debug/dist/node/extension/configurationProvider" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="program.not.found.message">
        <source xml:lang="en">Cannot find a program to debug</source>
        <target state="translated">デバッグするプログラムが見つかりません</target>
      </trans-unit>
      <trans-unit id="useWslDeprecationWarning.title">
        <source xml:lang="en">Attribute 'useWSL' is deprecated. Please use the 'Remote WSL' extension instead. Click [here]({0}) to learn more.</source>
        <target state="translated">属性 'useWSL' は非推奨です。代わりに 'Remote WSL' 拡張機能を使用してください。詳細は、[こちら]({0})をクリックしてください。</target>
      </trans-unit>
      <trans-unit id="useWslDeprecationWarning.doNotShowAgain">
        <source xml:lang="en">Don't Show Again</source>
        <target state="translated">今後表示しない</target>
      </trans-unit>
      <trans-unit id="NVS_HOME.not.found.message">
        <source xml:lang="en">Attribute 'runtimeVersion' requires Node.js version manager 'nvs'.</source>
        <target state="translated">'runtimeVersion' 属性には Node.js バージョン マネージャー 'nvs' が必要です。</target>
      </trans-unit>
      <trans-unit id="NVM_HOME.not.found.message">
        <source xml:lang="en">Attribute 'runtimeVersion' requires Node.js version manager 'nvm-windows' or 'nvs'.</source>
        <target state="translated">'runtimeVersion' 属性には Node.js バージョン マネージャー 'nvm-windows' または 'nvs' が必要です。</target>
      </trans-unit>
      <trans-unit id="NVM_DIR.not.found.message">
        <source xml:lang="en">Attribute 'runtimeVersion' requires Node.js version manager 'nvm' or 'nvs'.</source>
        <target state="translated">'runtimeVersion' 属性には Node.js バージョン マネージャー 'nvm' または 'nvs' が必要です。</target>
      </trans-unit>
      <trans-unit id="runtime.version.not.found.message">
        <source xml:lang="en">Node.js version '{0}' not installed for '{1}'.</source>
        <target state="translated">'{1}' に Node.js バージョン '{0}' はインストールされていません。</target>
      </trans-unit>
      <trans-unit id="node.launch.config.name">
        <source xml:lang="en">Launch Program</source>
        <target state="translated">プログラムの起動</target>
      </trans-unit>
      <trans-unit id="mern.starter.explanation">
        <source xml:lang="en">Launch configuration for '{0}' project created.</source>
        <target state="translated">'{0}' プロジェクトのための起動構成を生成しました。</target>
        <note>argument contains product name without translation</note>
      </trans-unit>
      <trans-unit id="program.guessed.from.package.json.explanation">
        <source xml:lang="en">Launch configuration created based on 'package.json'.</source>
        <target state="translated">'package.json' を基に起動構成を生成しました。</target>
      </trans-unit>
      <trans-unit id="outFiles.explanation">
        <source xml:lang="en">Adjust glob pattern(s) in the 'outFiles' attribute so that they cover the generated JavaScript.</source>
        <target state="translated">生成された JavaScript をカバーするように、 'outFiles' 属性で glob パターンを調整します。</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/ms-vscode.node-debug/dist/node/extension/processPicker" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="pid.error">
        <source xml:lang="en">Attach to process: cannot put process '{0}' in debug mode.</source>
        <target state="translated">プロセスにアタッチ: 処理 '{0}' をデバッグ モードにできません。</target>
      </trans-unit>
      <trans-unit id="process.id.error">
        <source xml:lang="en">Attach to process: '{0}' doesn't look like a process id.</source>
        <target state="translated">プロセスにアタッチ: '{0}' はプロセス ID ではないようです。</target>
      </trans-unit>
      <trans-unit id="pickNodeProcess">
        <source xml:lang="en">Pick the node.js process to attach to</source>
        <target state="translated">アタッチする node.js プロセスを選択してください</target>
      </trans-unit>
      <trans-unit id="process.picker.error">
        <source xml:lang="en">Process picker failed ({0})</source>
        <target state="translated">プロセス ピッカーが失敗しました ({0})</target>
      </trans-unit>
      <trans-unit id="process.id.port">
        <source xml:lang="en">process id: {0}, debug port: {1}</source>
        <target state="translated">プロセス ID: {0}、デバッグ ポート: {1}</target>
      </trans-unit>
      <trans-unit id="process.id.port.legacy">
        <source xml:lang="en">process id: {0}, debug port: {1} (legacy protocol)</source>
        <target state="translated">プロセス id: {0}、デバッグ ポート: {1} (レガシー プロトコル)</target>
      </trans-unit>
      <trans-unit id="process.id.port.signal">
        <source xml:lang="en">process id: {0}, debug port: {1} ({2})</source>
        <target state="translated">プロセス ID: {0}、デバッグ ポート: {1} ({2})</target>
      </trans-unit>
      <trans-unit id="process.id.signal">
        <source xml:lang="en">process id: {0} ({1})</source>
        <target state="translated">プロセス ID: {0} ({1})</target>
      </trans-unit>
      <trans-unit id="cannot.enable.debug.mode.error">
        <source xml:lang="en">Attach to process: cannot enable debug mode for process '{0}' ({1}).</source>
        <target state="translated">プロセスに添付: プロセス '{0}' ({1}) に対してデバッグ モードを有効にできません。</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/ms-vscode.node-debug/dist/node/extension/protocolDetection" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="protocol.switch.legacy.detected">
        <source xml:lang="en">Debugging with legacy protocol because it was detected.</source>
        <target state="translated">検出されたため、レガシ プロトコルでデバッグしています。</target>
      </trans-unit>
      <trans-unit id="protocol.switch.unknown.error">
        <source xml:lang="en">Debugging with inspector protocol because Node.js version could not be determined ({0})</source>
        <target state="translated">Node.js のバージョンを判別できなかったため、インスペクター プロトコルをデバッグしています ({0})</target>
      </trans-unit>
      <trans-unit id="protocol.switch.legacy.version">
        <source xml:lang="en">Debugging with legacy protocol because Node.js {0} was detected.</source>
        <target state="translated">Node.js {0} が検出されたため、以前のプロトコルでデバッグしています。</target>
      </trans-unit>
    </body>
  </file>
</xliff>