<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="extensions/typescript-language-features/package" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="displayName">
        <source xml:lang="en">TypeScript and JavaScript Language Features</source>
        <target state="translated">TypeScript と JavaScript の言語機能</target>
      </trans-unit>
      <trans-unit id="description">
        <source xml:lang="en">Provides rich language support for JavaScript and TypeScript.</source>
        <target state="translated">JavaScript と TypeScript ファイルに豊富な言語サポートを提供。</target>
      </trans-unit>
      <trans-unit id="reloadProjects.title">
        <source xml:lang="en">Reload Project</source>
        <target state="translated">プロジェクトの再読み込み</target>
      </trans-unit>
      <trans-unit id="configuration.typescript">
        <source xml:lang="en">TypeScript</source>
        <target state="translated">TypeScript</target>
      </trans-unit>
      <trans-unit id="configuration.suggest.completeFunctionCalls">
        <source xml:lang="en">Complete functions with their parameter signature.</source>
        <target state="translated">パラメーター シグネチャを含む完全な関数。</target>
      </trans-unit>
      <trans-unit id="configuration.suggest.includeAutomaticOptionalChainCompletions">
        <source xml:lang="en">Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.</source>
        <target state="translated">オプションのチェーン呼び出しを挿入する定義されていない可能性のある値で入力候補を表示することを有効または無効にします。TS 3.7+ および厳密な null チェックを有効にする必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.tsdk.desc">
        <source xml:lang="en">Specifies the folder path to the tsserver and lib*.d.ts files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.

- When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
- When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.

See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.</source>
        <target state="translated">IntelliSense に使用する TypeScript インストールの下にある tsserver ファイルと lib*.d.ts ファイルのフォルダー パスを指定します。例: `./node_modules/typescript/lib`

- ユーザー設定として指定する場合、`typescript.tsdk` の TypeScript バージョンが組み込みの TypeScript バージョンに自動的に置き換わります。
- ワークスペース設定として指定する場合、`typescript.tsdk` で `TypeScript: Select TypeScript version` コマンドを使用することによって、IntelliSense の対象ワークスペース バージョンの TypeScript を利用するように切り替えることができます。

TypeScript バージョンの管理について詳しくは、[TypeScript 資料](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions)をご覧ください。</target>
      </trans-unit>
      <trans-unit id="typescript.disableAutomaticTypeAcquisition">
        <source xml:lang="en">Disables automatic type acquisition. Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.</source>
        <target state="translated">型の自動取得を無効にします。型の自動取得は、外部ライブラリの Intelliense を向上させるために npm から `@types` パッケージを取得します。</target>
      </trans-unit>
      <trans-unit id="typescript.tsserver.log">
        <source xml:lang="en">Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.</source>
        <target state="translated">ファイルへの TS サーバーのログを有効にします。このログは TS サーバーの問題を診断するために使用できます。ログには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。</target>
      </trans-unit>
      <trans-unit id="typescript.tsserver.pluginPaths">
        <source xml:lang="en">Additional paths to discover TypeScript Language Service plugins. Requires using TypeScript 2.3.0 or newer in the workspace.</source>
        <target state="translated">Typescript 言語サービス プラグインを検出する追加のパス。ワークスペースで TypeScript 2.3.0 以降を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.tsserver.pluginPaths.item">
        <source xml:lang="en">Either an absolute or relative path. Relative path will be resolved against workspace folder(s).</source>
        <target state="translated">絶対または相対パスのいずれか。相対パスはワークスペース フォルダーに対して解決されます。</target>
      </trans-unit>
      <trans-unit id="typescript.tsserver.trace">
        <source xml:lang="en">Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.</source>
        <target state="translated">TS サーバーに送信されるメッセージのトレースを有効にします。このトレースは TS サーバーの問題を診断するために使用できます。トレースには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。</target>
      </trans-unit>
      <trans-unit id="typescript.validate.enable">
        <source xml:lang="en">Enable/disable TypeScript validation.</source>
        <target state="translated">TypeScript の検証を有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="typescript.format.enable">
        <source xml:lang="en">Enable/disable default TypeScript formatter.</source>
        <target state="translated">既定の TypeScript フォーマッタを有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="javascript.format.enable">
        <source xml:lang="en">Enable/disable default JavaScript formatter.</source>
        <target state="translated">既定の JavaScript フォーマッタを有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterCommaDelimiter">
        <source xml:lang="en">Defines space handling after a comma delimiter.</source>
        <target state="translated">コンマ区切り記号の後のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterConstructor">
        <source xml:lang="en">Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.</source>
        <target state="translated">コンストラクター キーワードの後にあるスペース処理を定義します。ワークスペースで TypeScript 2.3.0 以降を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterSemicolonInForStatements">
        <source xml:lang="en">Defines space handling after a semicolon in a for statement.</source>
        <target state="translated">for ステートメント内のセミコロンの後のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceBeforeAndAfterBinaryOperators">
        <source xml:lang="en">Defines space handling after a binary operator.</source>
        <target state="translated">2 項演算子の後のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterKeywordsInControlFlowStatements">
        <source xml:lang="en">Defines space handling after keywords in a control flow statement.</source>
        <target state="translated">制御フロー ステートメント内のキーワードの後のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterFunctionKeywordForAnonymousFunctions">
        <source xml:lang="en">Defines space handling after function keyword for anonymous functions.</source>
        <target state="translated">匿名関数の関数キーワードの後のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceBeforeFunctionParenthesis">
        <source xml:lang="en">Defines space handling before function argument parentheses.</source>
        <target state="translated">関数の引数のかっこの前にあるスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis">
        <source xml:lang="en">Defines space handling after opening and before closing non-empty parenthesis.</source>
        <target state="translated">左右の空でないかっこの間のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets">
        <source xml:lang="en">Defines space handling after opening and before closing non-empty brackets.</source>
        <target state="translated">左右の空でない角かっこの間のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces">
        <source xml:lang="en">Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.</source>
        <target state="translated">左右の空でないかっこの間のスペース処理を定義します。ワークスペースで TypeScript 2.3.0 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces">
        <source xml:lang="en">Defines space handling after opening and before closing template string braces.</source>
        <target state="translated">テンプレート文字列の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces">
        <source xml:lang="en">Defines space handling after opening and before closing JSX expression braces.</source>
        <target state="translated">JSX 式の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。</target>
      </trans-unit>
      <trans-unit id="format.insertSpaceAfterTypeAssertion">
        <source xml:lang="en">Defines space handling after type assertions in TypeScript. Requires using TypeScript 2.4 or newer in the workspace.</source>
        <target state="translated">TypeScript の型アサーションの後のスペース処理を定義します。ワークスペースで TypeScript 2.4 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="format.placeOpenBraceOnNewLineForFunctions">
        <source xml:lang="en">Defines whether an open brace is put onto a new line for functions or not.</source>
        <target state="translated">新しい行に関数の始め波かっこを配置するかどうかを定義します。</target>
      </trans-unit>
      <trans-unit id="format.placeOpenBraceOnNewLineForControlBlocks">
        <source xml:lang="en">Defines whether an open brace is put onto a new line for control blocks or not.</source>
        <target state="translated">新しい行にコントロール ブロックの始め波かっこを配置するかどうかを定義します。</target>
      </trans-unit>
      <trans-unit id="format.semicolons">
        <source xml:lang="en">Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.</source>
        <target state="translated">オプションのセミコロンの扱いを定義します。ワークスペースで TypeScript 3.7 バージョン以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="format.semicolons.ignore">
        <source xml:lang="en">Don't insert or remove any semicolons.</source>
        <target state="translated">セミコロンを挿入または削除しないでください。</target>
      </trans-unit>
      <trans-unit id="format.semicolons.insert">
        <source xml:lang="en">Insert semicolons at statement ends.</source>
        <target state="translated">ステートメントの最後にセミコロンを挿入します。</target>
      </trans-unit>
      <trans-unit id="format.semicolons.remove">
        <source xml:lang="en">Remove unnecessary semicolons.</source>
        <target state="translated">不要なセミコロンを削除します。</target>
      </trans-unit>
      <trans-unit id="javascript.validate.enable">
        <source xml:lang="en">Enable/disable JavaScript validation.</source>
        <target state="translated">JavaScript の検証を有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="goToProjectConfig.title">
        <source xml:lang="en">Go to Project Configuration</source>
        <target state="translated">プロジェクト構成に移動</target>
      </trans-unit>
      <trans-unit id="javascript.referencesCodeLens.enabled">
        <source xml:lang="en">Enable/disable references CodeLens in JavaScript files.</source>
        <target state="translated">JavaScript ファイル内で CodeLens の参照を有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="javascript.referencesCodeLens.showOnAllFunctions">
        <source xml:lang="en">Enable/disable references CodeLens on all functions in JavaScript files.</source>
        <target state="translated">JavaScript ファイル内のすべての関数で CodeLens への参照を有効または無効にします。</target>
      </trans-unit>
      <trans-unit id="typescript.referencesCodeLens.enabled">
        <source xml:lang="en">Enable/disable references CodeLens in TypeScript files.</source>
        <target state="translated">TypeScript ファイルで CodeLens の参照を有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="typescript.referencesCodeLens.showOnAllFunctions">
        <source xml:lang="en">Enable/disable references CodeLens on all functions in TypeScript files.</source>
        <target state="translated">有効および無効は、TypeScript ファイル内のすべての関数で CodeLens を参照します。</target>
      </trans-unit>
      <trans-unit id="typescript.implementationsCodeLens.enabled">
        <source xml:lang="en">Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.</source>
        <target state="translated">CodeLens の実装を有効/無効にします。この CodeLens は interface の実装を表示します。</target>
      </trans-unit>
      <trans-unit id="typescript.openTsServerLog.title">
        <source xml:lang="en">Open TS Server log</source>
        <target state="translated">TS サーバーのログを開く</target>
      </trans-unit>
      <trans-unit id="typescript.restartTsServer">
        <source xml:lang="en">Restart TS server</source>
        <target state="translated">TS サーバーを再起動</target>
      </trans-unit>
      <trans-unit id="typescript.selectTypeScriptVersion.title">
        <source xml:lang="en">Select TypeScript Version...</source>
        <target state="translated">TypeScript のバージョンを選択...</target>
      </trans-unit>
      <trans-unit id="typescript.reportStyleChecksAsWarnings">
        <source xml:lang="en">Report style checks as warnings.</source>
        <target state="translated">スタイル チェックを警告として報告します。</target>
      </trans-unit>
      <trans-unit id="javascript.implicitProjectConfig.checkJs">
        <source xml:lang="en">Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.</source>
        <target state="translated">JavaScript ファイルのセマンティック チェックを有効/無効にします。既存の jsconfig.json ファイルや tsconfig.json ファイルの設定はこれより優先されます。ワークスペースで TypeScript 2.3.1 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.npm">
        <source xml:lang="en">Specifies the path to the npm executable used for Automatic Type Acquisition. Requires using TypeScript 2.3.4 or newer in the workspace.</source>
        <target state="translated">種類の自動的な取得に使用される NPM 実行可能ファイルへのパスを指定します。ワークスペースで TypeScript 2.3.4 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.check.npmIsInstalled">
        <source xml:lang="en">Check if npm is installed for Automatic Type Acquisition.</source>
        <target state="translated">型定義の自動取得に NPM がインストールされているかどうかを確認します。</target>
      </trans-unit>
      <trans-unit id="configuration.suggest.names">
        <source xml:lang="en">Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.</source>
        <target state="translated">JavaScript の候補のファイルから一意の名前を含めることを有効または無効にします。名前の候補は、`@ts-check` または `checkJs` を使用して意味的にチェックされる JavaScript コードでは常に無効であることに注意してください。</target>
      </trans-unit>
      <trans-unit id="typescript.tsc.autoDetect">
        <source xml:lang="en">Controls auto detection of tsc tasks.</source>
        <target state="translated">tsc タスクの自動検出を制御します。</target>
      </trans-unit>
      <trans-unit id="typescript.tsc.autoDetect.off">
        <source xml:lang="en">Disable this feature.</source>
        <target state="translated">この機能を無効にします。</target>
      </trans-unit>
      <trans-unit id="typescript.tsc.autoDetect.on">
        <source xml:lang="en">Create both build and watch tasks.</source>
        <target state="translated">ビルドとウォッチ、両方のタスクを作成します。</target>
      </trans-unit>
      <trans-unit id="typescript.tsc.autoDetect.build">
        <source xml:lang="en">Only create single run compile tasks.</source>
        <target state="translated">単一の実行コンパイルタスクのみを作成します。</target>
      </trans-unit>
      <trans-unit id="typescript.tsc.autoDetect.watch">
        <source xml:lang="en">Only create compile and watch tasks.</source>
        <target state="translated">コンパイルタスクとウォッチタスクのみを作成します。</target>
      </trans-unit>
      <trans-unit id="typescript.problemMatchers.tsc.label">
        <source xml:lang="en">TypeScript problems</source>
        <target state="translated">TypeScript の問題</target>
      </trans-unit>
      <trans-unit id="typescript.problemMatchers.tscWatch.label">
        <source xml:lang="en">TypeScript problems (watch mode)</source>
        <target state="translated">TypeScript の問題 (ウォッチ モード)</target>
      </trans-unit>
      <trans-unit id="configuration.suggest.paths">
        <source xml:lang="en">Enable/disable suggestions for paths in import statements and require calls.</source>
        <target state="translated">import ステートメントや require 呼び出しでパスの提案を有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.useSeparateSyntaxServer">
        <source xml:lang="en">Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.</source>
        <target state="translated">折りたたみの計算やドキュメント シンボルのコンピューティングなど、構文に関連する操作に迅速に応答できる別の TypeScript サーバーの作成を有効または無効にします。ワークスペースで TypeScript 3.4.0 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.maxTsServerMemory">
        <source xml:lang="en">Set the maximum amount of memory (in MB) to allocate to the TypeScript server process</source>
        <target state="translated">TypeScript サーバー プロセスに割り当てるメモリの最大量 (MB) を設定する</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.experimental.enableProjectDiagnostics">
        <source xml:lang="en">(Experimental) Enables project wide error reporting.</source>
        <target state="translated">(試験的) プロジェクト全体のエラー報告を有効にします。</target>
      </trans-unit>
      <trans-unit id="typescript.locale">
        <source xml:lang="en">Sets the locale used to report JavaScript and TypeScript errors. Requires using TypeScript 2.6.0 or newer in the workspace. Default of `null` uses VS Code's locale.</source>
        <target state="translated">JavaScript と TypeScript のエラーを報告するために使用するロケールを設定します。ワークスペースで TypeScript 2.6.0 以上を使用する必要があります。既定値の `null` では VS Code のロケールを使用します。</target>
      </trans-unit>
      <trans-unit id="javascript.implicitProjectConfig.experimentalDecorators">
        <source xml:lang="en">Enable/disable `experimentalDecorators` for JavaScript files that are not part of a project. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.</source>
        <target state="translated">プロジェクト外の JavaScript ファイルの `experimentalDecorators` を有効/無効にします。既存の jsconfig.json ファイルや tsconfig.json ファイルの設定はこれより優先されます。ワークスペースで TypeScript 2.3.1 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="configuration.suggest.autoImports">
        <source xml:lang="en">Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.</source>
        <target state="translated">自動インポートの提案を有効/無効にします。ワークスペースで TypeScript 2.6.1 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="taskDefinition.tsconfig.description">
        <source xml:lang="en">The tsconfig file that defines the TS build.</source>
        <target state="translated">TS ビルドを定義する tsconfig ファイル。</target>
      </trans-unit>
      <trans-unit id="javascript.suggestionActions.enabled">
        <source xml:lang="en">Enable/disable suggestion diagnostics for JavaScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.</source>
        <target state="translated">エディター内で JavaScript ファイルの診断の提案を有効/無効にします。ワークスペースで TypeScript 2.8 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.suggestionActions.enabled">
        <source xml:lang="en">Enable/disable suggestion diagnostics for TypeScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.</source>
        <target state="translated">エディター内で TypeScript ファイルの診断の提案を有効/無効にします。ワークスペースで TypeScript 2.8 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.quoteStyle">
        <source xml:lang="en">Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.</source>
        <target state="translated">クイック修正に使用するのに好ましい引用符のスタイル: `single` 引用符、`double` 引用符、既存の import から種類を推測する `auto`。ワークスペースで TypeScript 2.9 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifier">
        <source xml:lang="en">Preferred path style for auto imports.</source>
        <target state="translated">自動 import の優先パス スタイル。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifier.auto">
        <source xml:lang="en">Automatically select import path style. Prefers using a relative import if `baseUrl` is configured and the relative path has fewer segments than the non-relative import.</source>
        <target state="translated">インポート パス スタイルを自動的に選択します。 `baseUrl` が構成されている場合、相対インポートが優先され、相対パスは非相対インポートよりセグメントが少ないです。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifier.relative">
        <source xml:lang="en">Relative to the file location.</source>
        <target state="translated">ファイルの場所を基準にします。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifier.nonRelative">
        <source xml:lang="en">Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`.</source>
        <target state="translated">`jsconfig.json` / `tsconfig.json` で構成されている `baseUrl` に基づきます。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifierEnding">
        <source xml:lang="en">Preferred path ending for auto imports.</source>
        <target state="translated">自動インポートの優先パスの末尾。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifierEnding.auto">
        <source xml:lang="en">Use project settings to select a default.</source>
        <target state="translated">プロジェクト設定を使用してデフォルトを選択します。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifierEnding.minimal">
        <source xml:lang="en">Shorten `./component/index.js` to `./component`.</source>
        <target state="translated">'./component/index.js' を './component' に短縮します。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifierEnding.index">
        <source xml:lang="en">Shorten `./component/index.js` to `./component/index`</source>
        <target state="translated">'./component/index.js' を './component/index' に短縮する</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.importModuleSpecifierEnding.js">
        <source xml:lang="en">Do not shorten path endings; include the `.js` extension.</source>
        <target state="translated">パスの末尾を短くしないでください。拡張子 '.js' を含めます。</target>
      </trans-unit>
      <trans-unit id="typescript.updateImportsOnFileMove.enabled">
        <source xml:lang="en">Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.</source>
        <target state="translated">VS Code で名前変更や移動したファイルのインポート パスの自動更新を有効/無効にします。ワークスペースで TypeScript 2.9 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.updateImportsOnFileMove.enabled.prompt">
        <source xml:lang="en">Prompt on each rename.</source>
        <target state="translated">名前を変更するときに確認をします。</target>
      </trans-unit>
      <trans-unit id="typescript.updateImportsOnFileMove.enabled.always">
        <source xml:lang="en">Always update paths automatically.</source>
        <target state="translated">常に自動的にパスを更新します。</target>
      </trans-unit>
      <trans-unit id="typescript.updateImportsOnFileMove.enabled.never">
        <source xml:lang="en">Never rename paths and don't prompt.</source>
        <target state="translated">パスの名前を変更せず確認も行いません。</target>
      </trans-unit>
      <trans-unit id="typescript.autoClosingTags">
        <source xml:lang="en">Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.</source>
        <target state="translated">JSX タグの自動クローズを有効/無効にします。ワークスペースで TypeScript 3.0 以上を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="typescript.suggest.enabled">
        <source xml:lang="en">Enabled/disable autocomplete suggestions.</source>
        <target state="translated">オートコンプリートの提案を有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="configuration.surveys.enabled">
        <source xml:lang="en">Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.</source>
        <target state="translated">VS Code の JavaScript と TypeScript のサポートを向上させるために、ときどき行われるアンケートを有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="configuration.suggest.completeJSDocs">
        <source xml:lang="en">Enable/disable suggestion to complete JSDoc comments.</source>
        <target state="translated">JSDoc のコメントを完成させるための提案を有効/無効にします。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions">
        <source xml:lang="en">Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.</source>
        <target state="translated">ファイルとディレクトリを追跡するために使用する監視方法を構成します。ワークスペースで TypeScript 3.8 以降を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchFile">
        <source xml:lang="en">Strategy for how individual files are watched.</source>
        <target state="translated">個々のファイルを監視するための方法。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchFile.fixedPollingInterval">
        <source xml:lang="en">Check every file for changes several times a second at a fixed interval.</source>
        <target state="translated">すべてのファイルで、一定の間隔で 1 秒に数回変更がないかを確認します。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchFile.priorityPollingInterval">
        <source xml:lang="en">Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</source>
        <target state="translated">すべてのファイルで 1 秒間に数回変更を確認しますが、ヒューリスティックを使用して、特定の種類のファイルを他のファイルよりも少ない頻繁で確認することができます。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling">
        <source xml:lang="en">Use a dynamic queue where less-frequently modified files will be checked less often.</source>
        <target state="translated">変更頻度の低いファイルの確認頻度が低い場合は、動的キューを使用します。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchFile.useFsEvents">
        <source xml:lang="en">Attempt to use the operating system/file system’s native events for file changes.</source>
        <target state="translated">ファイルの変更にオペレーティング システムまたはファイル システムのネイティブ イベントを使用しようとしています。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory">
        <source xml:lang="en">Attempt to use the operating system/file system’s native events to listen for changes on a file’s containing directories. This can use fewer file watchers, but might be less accurate.</source>
        <target state="translated">オペレーティング システムまたはファイル システムのネイティブ イベントを使用して、ディレクトリを含んでいるファイルに対する変更をリッスンします。使用するファイル ウォッチャーの数を減らすことができますが、正確性が低くなります。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchDirectory">
        <source xml:lang="en">Strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.</source>
        <target state="translated">再帰的なファイル監視機能を持たないシステムでディレクトリ ツリー全体を監視するための方法。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval">
        <source xml:lang="en">Check every directory for changes several times a second at a fixed interval.</source>
        <target state="translated">すべてのディレクトリで、一定の間隔で 1 秒間に数回、変更を確認します。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling">
        <source xml:lang="en">Use a dynamic queue where less-frequently modified directories will be checked less often.</source>
        <target state="translated">変更頻度の少ないディレクトリの確認頻度が少ない動的キューを使用します。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.watchDirectory.useFsEvents">
        <source xml:lang="en">Attempt to use the operating system/file system’s native events for directory changes.</source>
        <target state="translated">ディレクトリの変更にオペレーティング システムまたはファイル システムのネイティブ イベントを使用します。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.fallbackPolling">
        <source xml:lang="en">When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.</source>
        <target state="translated">ファイル システム イベントを使用する場合、このオプションは、システムがネイティブ ファイル ウォッチャーを使い果たし、ネイティブ ファイル ウォッチャーをサポートしていない場合に使用されるポーリング方法を指定します。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval">
        <source xml:lang="en">Check every file for changes several times a second at a fixed interval.</source>
        <target state="translated">すべてのファイルで、一定の間隔で 1 秒に数回変更がないか確認します。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval">
        <source xml:lang="en">Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</source>
        <target state="translated">すべてのファイルで 1 秒間に数回変更を確認しますが、特定の種類のファイルを他のファイルより少ない頻度で確認する場合は、ヒューリスティックを使用してください。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ">
        <source xml:lang="en">Use a dynamic queue where less-frequently modified files will be checked less often.</source>
        <target state="translated">変更頻度の低いファイルの確認頻度が低い場合は、動的キューを使用します。</target>
      </trans-unit>
      <trans-unit id="configuration.tsserver.watchOptions.synchronousWatchDirectory">
        <source xml:lang="en">Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups.</source>
        <target state="translated">ディレクトリの遅延監視を無効にします。遅延監視は、一度に多数のファイル変更が生じる場合 (たとえば、npm install の実行からの node_modules の変更) には便利ですが、一般的ではない設定ではこのフラグを無効にすることができます。</target>
      </trans-unit>
      <trans-unit id="typescript.preferences.renameShorthandProperties">
        <source xml:lang="en">Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.</source>
        <target state="translated">名前の変更時にオブジェクトの短縮形のプロパティ用にエイリアスを使用することを有効または無効にします。ワークスペースで TypeScript 3.4 以降を使用する必要があります。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.extract.constant.title">
        <source xml:lang="en">Extract constant</source>
        <target state="translated">定数を抽出する</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.extract.constant.description">
        <source xml:lang="en">Extract expression to constant.</source>
        <target state="translated">式を定数に抽出します。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.extract.function.title">
        <source xml:lang="en">Extract function</source>
        <target state="translated">関数を抽出する</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.extract.function.description">
        <source xml:lang="en">Extract expression to method or function.</source>
        <target state="translated">式をメソッドまたは関数に抽出します。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.extract.type.title">
        <source xml:lang="en">Extract type</source>
        <target state="translated">型の抽出</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.extract.type.description">
        <source xml:lang="en">Extract type to a type alias.</source>
        <target state="translated">型を型のエイリアスに抽出します。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.extract.interface.title">
        <source xml:lang="en">Extract interface</source>
        <target state="translated">インターフェイスの抽出</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.extract.interface.description">
        <source xml:lang="en">Extract type to an interface.</source>
        <target state="translated">型をインターフェイスに抽出します。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.import.title">
        <source xml:lang="en">Convert import</source>
        <target state="translated">インポートを変換する</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.import.description">
        <source xml:lang="en">Convert between named imports and namespace imports.</source>
        <target state="translated">名前付きインポートと名前空間インポートを変換します。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.export.title">
        <source xml:lang="en">Convert export</source>
        <target state="translated">エクスポートを変換する</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.export.description">
        <source xml:lang="en">Convert between default export and named export.</source>
        <target state="translated">既定のエクスポートと名前付きエクスポートを変換します。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.move.newFile.title">
        <source xml:lang="en">Move to a new file</source>
        <target state="translated">新しいファイルへ移動</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.move.newFile.description">
        <source xml:lang="en">Move the expression to a new file.</source>
        <target state="translated">式を新しいファイルに移動します。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.arrow.braces.title">
        <source xml:lang="en">Rewrite arrow braces</source>
        <target state="translated">中かっこを書き換える</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.arrow.braces.description">
        <source xml:lang="en">Add or remove braces in an arrow function.</source>
        <target state="translated">アロー関数内のかっこを追加または削除します。</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.parameters.toDestructured.title">
        <source xml:lang="en">Convert parameters to destructured object</source>
        <target state="translated">パラメーターを非構造化オブジェクトに変換する</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.property.generateAccessors.title">
        <source xml:lang="en">Generate accessors</source>
        <target state="translated">アクセサーを生成する</target>
      </trans-unit>
      <trans-unit id="codeActions.refactor.rewrite.property.generateAccessors.description">
        <source xml:lang="en">Generate 'get' and 'set' accessors</source>
        <target state="translated">'get' アクセサーと 'set' アクセサーを生成する</target>
      </trans-unit>
      <trans-unit id="codeActions.source.organizeImports.title">
        <source xml:lang="en">Organize imports</source>
        <target state="translated">インポートを整理</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/utils/api" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="invalidVersion">
        <source xml:lang="en">invalid version</source>
        <target state="translated">無効なバージョン</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/utils/tsconfig" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="typescript.configureTsconfigQuickPick">
        <source xml:lang="en">Configure tsconfig.json</source>
        <target state="translated">tsconfig.json を構成する</target>
      </trans-unit>
      <trans-unit id="typescript.configureJsconfigQuickPick">
        <source xml:lang="en">Configure jsconfig.json</source>
        <target state="translated">jsconfig.json を構成する</target>
      </trans-unit>
      <trans-unit id="typescript.noTypeScriptProjectConfig">
        <source xml:lang="en">File is not part of a TypeScript project. Click [here]({0}) to learn more.</source>
        <target state="translated">ファイルは TypeScript プロジェクトの一部ではありません。詳細情報は [こちら]({1}) をクリックしてください。</target>
      </trans-unit>
      <trans-unit id="typescript.noJavaScriptProjectConfig">
        <source xml:lang="en">File is not part of a JavaScript project Click [here]({0}) to learn more.</source>
        <target state="translated">ファイルは JavaScript プロジェクトの一部ではありません。詳細情報は [こちら]({1}) をクリックしてください。</target>
      </trans-unit>
      <trans-unit id="typescript.projectConfigNoWorkspace">
        <source xml:lang="en">Please open a folder in VS Code to use a TypeScript or JavaScript project</source>
        <target state="translated">TypeScript または JavaScript プロジェクトを使用するには、VS Code でフォルダーを開いてください</target>
      </trans-unit>
      <trans-unit id="typescript.projectConfigUnsupportedFile">
        <source xml:lang="en">Could not determine TypeScript or JavaScript project. Unsupported file type</source>
        <target state="translated">TypeScript または JavaScript のプロジェクトを判別できませんでした。サポートされていないファイルの種類です</target>
      </trans-unit>
      <trans-unit id="typescript.projectConfigCouldNotGetInfo">
        <source xml:lang="en">Could not determine TypeScript or JavaScript project</source>
        <target state="translated">TypeScript または JavaScript のプロジェクトを判別できませんでした</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/baseCodeLensProvider" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="referenceErrorLabel">
        <source xml:lang="en">Could not determine references</source>
        <target state="translated">参照を判別できませんでした</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/completions" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="selectCodeAction">
        <source xml:lang="en">Select code action to apply</source>
        <target state="translated">適用するコード アクションを選択</target>
      </trans-unit>
      <trans-unit id="acquiringTypingsLabel">
        <source xml:lang="en">Acquiring typings...</source>
        <target state="translated">Typings の定義ファイルを取得中...</target>
        <note>Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized</note>
      </trans-unit>
      <trans-unit id="acquiringTypingsDetail">
        <source xml:lang="en">Acquiring typings definitions for IntelliSense.</source>
        <target state="translated">IntelliSense の Typings の定義ファイルを取得しています。</target>
        <note>Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized</note>
      </trans-unit>
      <trans-unit id="autoImportLabel">
        <source xml:lang="en">Auto import from {0}</source>
        <target state="translated">{0} から自動インポート</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/directiveCommentCompletions" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="ts-check">
        <source xml:lang="en">Enables semantic checking in a JavaScript file. Must be at the top of a file.</source>
        <target state="translated">JavaScript ファイルのセマンティック チェックを有効にします。 ファイルの先頭にある必要があります。</target>
      </trans-unit>
      <trans-unit id="ts-nocheck">
        <source xml:lang="en">Disables semantic checking in a JavaScript file. Must be at the top of a file.</source>
        <target state="translated">JavaScript ファイルのセマンティック チェックを無効にします。 ファイルの先頭にある必要があります。</target>
      </trans-unit>
      <trans-unit id="ts-ignore">
        <source xml:lang="en">Suppresses @ts-check errors on the next line of a file.</source>
        <target state="translated">ファイルの次の行で @ts-check エラーを抑制します。</target>
      </trans-unit>
      <trans-unit id="ts-expect-error">
        <source xml:lang="en">Suppresses @ts-check errors on the next line of a file, expecting at least one to exist.</source>
        <target state="translated">ファイルの次の行で @ts-check エラーを表示しません。少なくとも 1 つ存在する必要があります。</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/implementationsCodeLens" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="oneImplementationLabel">
        <source xml:lang="en">1 implementation</source>
        <target state="translated">1 個の実装</target>
      </trans-unit>
      <trans-unit id="manyImplementationLabel">
        <source xml:lang="en">{0} implementations</source>
        <target state="translated">{0} 個の実装</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/jsDocCompletions" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="typescript.jsDocCompletionItem.documentation">
        <source xml:lang="en">JSDoc comment</source>
        <target state="translated">JSDoc コメント</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/organizeImports" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="organizeImportsAction.title">
        <source xml:lang="en">Organize Imports</source>
        <target state="translated">インポートを整理</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/quickFix" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="fixAllInFileLabel">
        <source xml:lang="en">{0} (Fix all in file)</source>
        <target state="translated">{0} (ファイルの中のすべてを修正する)</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/fixAll" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="autoFix.label">
        <source xml:lang="en">Auto fix</source>
        <target state="translated">自動修正</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/refactor" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="refactoringFailed">
        <source xml:lang="en">Could not apply refactoring</source>
        <target state="translated">リファクタリングを適用できませんでした。</target>
      </trans-unit>
      <trans-unit id="extractConstant.disabled.title">
        <source xml:lang="en">Extract to constant</source>
        <target state="translated">定数への抽出</target>
      </trans-unit>
      <trans-unit id="extractConstant.disabled.reason">
        <source xml:lang="en">The current selection cannot be extracted</source>
        <target state="translated">現在の選択範囲を抽出できません</target>
      </trans-unit>
      <trans-unit id="extractFunction.disabled.title">
        <source xml:lang="en">Extract to function</source>
        <target state="translated">関数への抽出</target>
      </trans-unit>
      <trans-unit id="extractFunction.disabled.reason">
        <source xml:lang="en">The current selection cannot be extracted</source>
        <target state="translated">現在の選択範囲を抽出できません</target>
      </trans-unit>
      <trans-unit id="refactor.documentation.title">
        <source xml:lang="en">Learn more about JS/TS refactorings</source>
        <target state="translated">JS/TS リファクタリングの詳細</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/referencesCodeLens" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="oneReferenceLabel">
        <source xml:lang="en">1 reference</source>
        <target state="translated">1 個の参照</target>
      </trans-unit>
      <trans-unit id="manyReferenceLabel">
        <source xml:lang="en">{0} references</source>
        <target state="translated">{0} 個の参照</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/rename" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="fileRenameFail">
        <source xml:lang="en">An error occurred while renaming file</source>
        <target state="translated">ファイル名を変更中にエラーが発生しました</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/typescriptServiceClient" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="noServerFound">
        <source xml:lang="en">The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.</source>
        <target state="translated">パス {0} は、有効な tsserver インストールを指していません。バンドルされている TypeScript バージョンにフォールバックしています。</target>
      </trans-unit>
      <trans-unit id="serverExitedWithError">
        <source xml:lang="en">TypeScript language server exited with error. Error message is: {0}</source>
        <target state="translated">TypeScript 言語サーバーがエラーで終了しました。エラー メッセージ: {0}</target>
      </trans-unit>
      <trans-unit id="typescript.openTsServerLog.loggingNotEnabled">
        <source xml:lang="en">TS Server logging is off. Please set `typescript.tsserver.log` and restart the TS server to enable logging</source>
        <target state="translated">TS サーバーのログがオフになっています。ログを有効にするには、`typescript.tsserver.log` を設定して TS サーバーを再起動してください</target>
      </trans-unit>
      <trans-unit id="typescript.openTsServerLog.enableAndReloadOption">
        <source xml:lang="en">Enable logging and restart TS server</source>
        <target state="translated">ログを有効にして、TS サーバーを再起動する</target>
      </trans-unit>
      <trans-unit id="typescript.openTsServerLog.noLogFile">
        <source xml:lang="en">TS Server has not started logging.</source>
        <target state="translated">TS サーバーはログを開始していません。</target>
      </trans-unit>
      <trans-unit id="openTsServerLog.openFileFailedFailed">
        <source xml:lang="en">Could not open TS Server log file</source>
        <target state="translated">TS サーバーのログ ファイルを開くことができませんでした</target>
      </trans-unit>
      <trans-unit id="serverDiedReportIssue">
        <source xml:lang="en">Report Issue</source>
        <target state="translated">問題を報告</target>
      </trans-unit>
      <trans-unit id="serverDiedAfterStart">
        <source xml:lang="en">The TypeScript language service died 5 times right after it got started. The service will not be restarted.</source>
        <target state="translated">TypeScript 言語サービスは、開始直後に 5 回停止しました。サービスは再開されません。</target>
      </trans-unit>
      <trans-unit id="serverDied">
        <source xml:lang="en">The TypeScript language service died unexpectedly 5 times in the last 5 Minutes.</source>
        <target state="translated">TypeScript 言語サービスは、直前の 5 分間に 5 回、予期せずに停止しました。</target>
      </trans-unit>
      <trans-unit id="serverDiedOnce">
        <source xml:lang="en">The TypeScript language service died unexpectedly.</source>
        <target state="translated">TypeScript 言語サービスが予期せずに終了しました。</target>
      </trans-unit>
      <trans-unit id="serverLoading.progress">
        <source xml:lang="en">Initializing JS/TS language features</source>
        <target state="translated">JS/TS 言語機能を初期化しています</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/utils/logger" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="channelName">
        <source xml:lang="en">TypeScript</source>
        <target state="translated">TypeScript</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/utils/versionManager" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="selectTsVersion">
        <source xml:lang="en">Select the TypeScript version used for JavaScript and TypeScript language features</source>
        <target state="translated">JavaScript および TypeScript 言語の機能に使用する TypeScript バージョンを選択します</target>
      </trans-unit>
      <trans-unit id="useVSCodeVersionOption">
        <source xml:lang="en">Use VS Code's Version</source>
        <target state="translated">VS Code のバージョンを使用</target>
      </trans-unit>
      <trans-unit id="useWorkspaceVersionOption">
        <source xml:lang="en">Use Workspace Version</source>
        <target state="translated">ワークスペースのバージョンを使用</target>
      </trans-unit>
      <trans-unit id="learnMore">
        <source xml:lang="en">Learn more about managing TypeScript versions</source>
        <target state="translated">TypeScript のバージョンの管理についての詳細</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/utils/versionProvider" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="couldNotLoadTsVersion">
        <source xml:lang="en">Could not load the TypeScript version at this path</source>
        <target state="translated">このパスでは TypeScript のバージョンを読み込むことができません</target>
      </trans-unit>
      <trans-unit id="noBundledServerFound">
        <source xml:lang="en">VS Code's tsserver was deleted by another application such as a misbehaving virus detection tool. Please reinstall VS Code.</source>
        <target state="translated">VS Code の tsserver が適切に動作しないウイルス検出ツールなどの他アプリケーションにより削除されました。VS Code を再インストールしてください。</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/utils/typingsStatus" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="installingPackages">
        <source xml:lang="en">Fetching data for better TypeScript IntelliSense</source>
        <target state="translated">より適した TypeScript IntelliSense に関するデータをフェッチしています</target>
      </trans-unit>
      <trans-unit id="typesInstallerInitializationFailed.title">
        <source xml:lang="en">Could not install typings files for JavaScript language features. Please ensure that NPM is installed or configure 'typescript.npm' in your user settings. Click [here]({0}) to learn more.</source>
        <target state="translated">JavaScript 言語機能のための型定義ファイルをインストールできませんでした。NPM のインストールを確認するか、ユーザー設定で  'typescript.npm' を構成してください。詳細は [こちら]({0}) をクリックしてください。</target>
      </trans-unit>
      <trans-unit id="typesInstallerInitializationFailed.doNotCheckAgain">
        <source xml:lang="en">Don't Show Again</source>
        <target state="translated">今後表示しない</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/utils/versionStatus" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="projectQuickPick.placeholder">
        <source xml:lang="en">TypeScript Project Info</source>
        <target state="translated">TypeScript プロジェクト情報</target>
      </trans-unit>
      <trans-unit id="projectQuickPick.version.label">
        <source xml:lang="en">Select TypeScript Version...</source>
        <target state="translated">TypeScript のバージョンを選択...</target>
      </trans-unit>
      <trans-unit id="projectQuickPick.project.create">
        <source xml:lang="en">Create tsconfig</source>
        <target state="translated">tsconfig を作成する</target>
      </trans-unit>
      <trans-unit id="projectQuickPick.project.create.description">
        <source xml:lang="en">This file is currently not part of a tsconfig/jsconfig project</source>
        <target state="translated">このファイルは現在、tsconfig/jsconfig プロジェクトの一部ではありません</target>
      </trans-unit>
      <trans-unit id="projectQuickPick.version.goProjectConfig">
        <source xml:lang="en">Open tsconfig</source>
        <target state="translated">tsconfig を開く</target>
      </trans-unit>
      <trans-unit id="projectQuickPick.help">
        <source xml:lang="en">TypeScript help</source>
        <target state="translated">TypeScriptのヘルプ</target>
      </trans-unit>
      <trans-unit id="projectInfo.name">
        <source xml:lang="en">TypeScript: Project Info</source>
        <target state="translated">TypeScript: プロジェクト情報</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/updatePathsOnRename" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="renameProgress.title">
        <source xml:lang="en">Checking for update of JS/TS imports</source>
        <target state="translated">JS/TS インポートの更新を確認しています</target>
      </trans-unit>
      <trans-unit id="prompt">
        <source xml:lang="en">Update imports for '{0}'?</source>
        <target state="translated">'{0}' のインポートを更新しますか?</target>
      </trans-unit>
      <trans-unit id="promptMoreThanOne">
        <source xml:lang="en">Update imports for the following {0} files?</source>
        <target state="translated">次の {0} ファイルのインポートを更新しますか?</target>
      </trans-unit>
      <trans-unit id="reject.title">
        <source xml:lang="en">No</source>
        <target state="translated">いいえ</target>
      </trans-unit>
      <trans-unit id="accept.title">
        <source xml:lang="en">Yes</source>
        <target state="translated">はい</target>
      </trans-unit>
      <trans-unit id="always.title">
        <source xml:lang="en">Always automatically update imports</source>
        <target state="translated">常に Import を自動的に更新します</target>
      </trans-unit>
      <trans-unit id="never.title">
        <source xml:lang="en">Never automatically update imports</source>
        <target state="translated">今後は Import を自動的に更新しません</target>
      </trans-unit>
      <trans-unit id="moreFile">
        <source xml:lang="en">...1 additional file not shown</source>
        <target state="translated">...1 つの追加ファイルが表示されていません</target>
      </trans-unit>
      <trans-unit id="moreFiles">
        <source xml:lang="en">...{0} additional files not shown</source>
        <target state="translated">...{0} 個の追加ファイルが表示されていません</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/utils/largeProjectStatus" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="statusExclude">
        <source xml:lang="en">TypeScript: Configure Excludes</source>
        <target state="translated">TypeScript: 除外の構成</target>
      </trans-unit>
      <trans-unit id="hintExclude">
        <source xml:lang="en">To enable project-wide JavaScript/TypeScript language features, exclude folders with many files, like: {0}</source>
        <target state="translated">プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、多数のファイルが含まれるフォルダーを除外します。例: {0}</target>
      </trans-unit>
      <trans-unit id="hintExclude.generic">
        <source xml:lang="en">To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.</source>
        <target state="translated">プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、作業していないソース ファイルが含まれるサイズの大きなフォルダーを除外します。</target>
      </trans-unit>
      <trans-unit id="large.label">
        <source xml:lang="en">Configure Excludes</source>
        <target state="translated">除外の構成</target>
      </trans-unit>
      <trans-unit id="hintExclude.tooltip">
        <source xml:lang="en">To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.</source>
        <target state="translated">プロジェクト全体の JavaScript/TypeScript 言語機能を有効にするには、作業していないソース ファイルが含まれるサイズの大きなフォルダーを除外します。</target>
      </trans-unit>
    </body>
  </file>
  <file original="extensions/typescript-language-features/dist/features/task" source-language="en" target-language="ja" datatype="plaintext">
    <body>
      <trans-unit id="badTsConfig">
        <source xml:lang="en">TypeScript Task in tasks.json contains "\\". TypeScript tasks tsconfig must use "/"</source>
        <target state="translated">tasks.json の Typescript タスクに "\\" が含まれています。Typescript タスクの tsconfig では "/" を使用する必要があります</target>
      </trans-unit>
      <trans-unit id="buildTscLabel">
        <source xml:lang="en">build - {0}</source>
        <target state="translated">ビルド - {0}</target>
      </trans-unit>
      <trans-unit id="buildAndWatchTscLabel">
        <source xml:lang="en">watch - {0}</source>
        <target state="translated">ウォッチ - {0}</target>
      </trans-unit>
    </body>
  </file>
</xliff>