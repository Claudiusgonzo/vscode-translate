<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="extensions/ms-vscode.js-debug-nightly/package" source-language="en" target-language="zh-Hant" datatype="plaintext">
    <body>
      <trans-unit id="add.browser.breakpoint">
        <source xml:lang="en">Add Browser Breakpoint</source>
        <target state="translated">新增瀏覽器中斷點</target>
      </trans-unit>
      <trans-unit id="attach.node.process">
        <source xml:lang="en">Attach to Node Process (preview)</source>
        <target state="translated">附加至節點處理序 (預覽)</target>
      </trans-unit>
      <trans-unit id="browser.address.description">
        <source xml:lang="en">TCP/IP address of debug port</source>
        <target state="translated">偵錯連接埠 TCP/IP 位址</target>
      </trans-unit>
      <trans-unit id="browser.baseUrl.description">
        <source xml:lang="en">Base URL to resolve paths baseUrl. baseURL is trimmed when mapping URLs to the files on disk. Defaults to the launch URL domain.</source>
        <target state="translated">用於解析路徑 baseUrl 的基底 URL。將 URL 對應至磁碟上的檔案時，baseURL 會受到修剪。預設為啟動 URL 網域。</target>
      </trans-unit>
      <trans-unit id="browser.cwd.description">
        <source xml:lang="en">Optional working directory for the runtime executable.</source>
        <target state="translated">在執行階段可執行檔的選擇性工作目錄</target>
      </trans-unit>
      <trans-unit id="browser.disableNetworkCache.description">
        <source xml:lang="en">Controls whether to skip the network cache for each request</source>
        <target state="translated">控制是否跳過每次要求的網路快取</target>
      </trans-unit>
      <trans-unit id="browser.env.description">
        <source xml:lang="en">Optional dictionary of environment key/value pairs for the browser.</source>
        <target state="translated">瀏覽器環境索引鍵/值組的選用字典。</target>
      </trans-unit>
      <trans-unit id="browser.file.description">
        <source xml:lang="en">A local html file to open in the browser</source>
        <target state="translated">本地端的 html 檔案開啟於瀏覽器</target>
      </trans-unit>
      <trans-unit id="browser.inspectUri.description">
        <source xml:lang="en">Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:
 - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`
 - `port` is the debug port that Chrome is listening on.
 - `browserInspectUri` is the inspector URI on the launched browser
 - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.
</source>
        <target state="translated">用於重寫 inspectUri 的格式: 這是在 `{curlyBraces}` 中插入索引鍵的範本字串。可用的索引鍵包括:
 - `url.*` 是正在執行之應用程式的剖析位址。例如 `{url.port}`、`{url.hostname}`
 - `port` 是 Chrome 聆聽的偵錯連接埠。
 - `browserInspectUri` 是已啟動瀏覽器的偵測器 URI。
 - `wsProtocol` 是提示的 WebSocket 通訊協定。如果原始 URL 為 `https` 或 `ws` 等其他項目，此項目會設定為 `wss`。</target>
      </trans-unit>
      <trans-unit id="browser.pathMapping.description">
        <source xml:lang="en">A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk</source>
        <target state="translated">URL/路徑對本機資料夾的對應，可將瀏覽器中的指令碼解析至磁碟上的指令碼</target>
      </trans-unit>
      <trans-unit id="browser.port.description">
        <source xml:lang="en">Port to use for remote debugging the browser.</source>
        <target state="translated">要用於遠端偵錯瀏覽器的連接埠。</target>
      </trans-unit>
      <trans-unit id="browser.runtimeArgs.description">
        <source xml:lang="en">Optional arguments passed to the runtime executable.</source>
        <target state="translated">傳遞給執行階段可執行檔的選擇性引數。</target>
      </trans-unit>
      <trans-unit id="browser.runtimeExecutable.description">
        <source xml:lang="en">Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.</source>
        <target state="translated">瀏覽器可執行檔的 'canary'、'stable'、'custom' 或路徑。自訂表示自訂包裝函式、自訂組建或 CHROME_PATH 環境變數。</target>
      </trans-unit>
      <trans-unit id="browser.server.description">
        <source xml:lang="en">Configures a web server to start up. Takes the same configuration as the 'node' launch task.</source>
        <target state="translated">設定要啟動的網頁伺服器。會採用與 'node' 啟動工作相同的組態。</target>
      </trans-unit>
      <trans-unit id="browser.skipFiles.description">
        <source xml:lang="en">An array of file or folder names, or path globs, to skip when debugging.</source>
        <target state="translated">偵錯時要跳過的檔案、資料夾名稱或路徑 Glob 的陣列。</target>
      </trans-unit>
      <trans-unit id="browser.smartStep.description">
        <source xml:lang="en">Automatically step through unmapped lines in sourcemapped files. For example, code that TypeScript produces automatically when downcompiling async/await or other features.</source>
        <target state="translated">自動跳過已對應來源檔案中的未對應行。例如，向下編譯 (Downcompiling) async/await 或其他功能時，TypeScript 自動產生的程式碼。</target>
      </trans-unit>
      <trans-unit id="browser.sourceMapPathOverrides.description">
        <source xml:lang="en">A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.</source>
        <target state="translated">依據 sourcemap 指示重新寫入一組來源檔案位置對應至磁碟上的位置。如需詳細資訊，請參閱 README。</target>
      </trans-unit>
      <trans-unit id="browser.sourceMaps.description">
        <source xml:lang="en">Use JavaScript source maps (if they exist).</source>
        <target state="translated">使用 JavaScript 來源對應 (如果存在)。</target>
      </trans-unit>
      <trans-unit id="browser.timeout.description">
        <source xml:lang="en">Retry for this number of milliseconds to connect to the browser. Default is 10000 ms.</source>
        <target state="translated">重試此毫秒數以連線至瀏覽器。預設為 10000 毫秒。</target>
      </trans-unit>
      <trans-unit id="browser.url.description">
        <source xml:lang="en">Will search for a tab with this exact url and attach to it, if found</source>
        <target state="translated">將會搜尋具有此明確 URL 的索引標籤，並在找到時加以附加</target>
      </trans-unit>
      <trans-unit id="browser.urlFilter.description">
        <source xml:lang="en">Will search for a page with this url and attach to it, if found. Can have * wildcards.</source>
        <target state="translated">會以此 URL 搜尋頁面，如果有找到的話就將 URL 附加到頁面上。可以有 * 萬用字元。</target>
      </trans-unit>
      <trans-unit id="browser.userDataDir.description">
        <source xml:lang="en">By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.</source>
        <target state="translated">根據預設，瀏覽器會以暫存資料夾中的單獨使用者設定檔啟動。使用此選項加以覆寫。設定為 false 來以您的預設使用者設定檔啟動。</target>
      </trans-unit>
      <trans-unit id="browser.webRoot.description">
        <source xml:lang="en">This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for "/"</source>
        <target state="translated">這會將工作區絕對路徑指定到 webserver 根。用來將類似 `/app.js` 的路徑解析到磁碟上的檔案。"/" pathMapping 的速記</target>
      </trans-unit>
      <trans-unit id="chrome.attach.description">
        <source xml:lang="en">Attach to an instance of Chrome already in debug mode</source>
        <target state="translated">附加至已經進入偵錯模式的 Chrome 執行個體</target>
      </trans-unit>
      <trans-unit id="chrome.attach.label">
        <source xml:lang="en">Chrome: Attach</source>
        <target state="translated">Chrome: 附加</target>
      </trans-unit>
      <trans-unit id="chrome.label">
        <source xml:lang="en">Chrome (preview)</source>
        <target state="translated">Chrome (預覽)</target>
      </trans-unit>
      <trans-unit id="chrome.launch.description">
        <source xml:lang="en">Launch Chrome to debug a URL</source>
        <target state="translated">啟動 Chrome 以偵錯 URL</target>
      </trans-unit>
      <trans-unit id="chrome.launch.label">
        <source xml:lang="en">Chrome: Launch</source>
        <target state="translated">Chrome: 啟動</target>
      </trans-unit>
      <trans-unit id="configuration.npmScriptLensLocation">
        <source xml:lang="en">Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".</source>
        <target state="translated">"Run" 與 "Debug" 程式碼濾鏡應在您 npm 指令碼中顯示的位置。可以是「全部」、指令碼、指令碼區段的「頂端」或「永不」。</target>
      </trans-unit>
      <trans-unit id="configuration.suggestPrettyPrinting">
        <source xml:lang="en">Whether to suggest pretty printing JavaScript code that looks minified when you step into it.</source>
        <target state="translated">是否要在您進入時建議看起來已縮小的美化顯示 JavaScript 程式碼。</target>
      </trans-unit>
      <trans-unit id="configuration.terminalOptions">
        <source xml:lang="en">Default launch options for the JavaScript debug terminal and npm scripts.</source>
        <target state="translated">JavaScript 偵錯終端機和 npm 指令碼的預設啟動選項。</target>
      </trans-unit>
      <trans-unit id="configuration.usePreview">
        <source xml:lang="en">Use the new in-preview JavaScript debugger for Node.js and Chrome.</source>
        <target state="translated">使用 Node.js 和 Chrome 適用的全新預覽版 JavaScript 偵錯工具。</target>
      </trans-unit>
      <trans-unit id="configuration.warnOnLongPrediction">
        <source xml:lang="en">Whether a loading prompt should be shown if breakpoint prediction takes a while.</source>
        <target state="translated">如果中斷點預測需要一段時間，是否應顯示載入提示。</target>
      </trans-unit>
      <trans-unit id="debug.npm.edit">
        <source xml:lang="en">Edit package.json</source>
        <target state="translated">編輯 package.json</target>
      </trans-unit>
      <trans-unit id="debug.npm.noScripts">
        <source xml:lang="en">No npm scripts found in your package.json</source>
        <target state="translated">未在您的 package.json 找到 npm 指令碼</target>
      </trans-unit>
      <trans-unit id="debug.npm.noWorkspaceFolder">
        <source xml:lang="en">You need to open a workspace folder to debug npm scripts.</source>
        <target state="translated">您需要開啟工作區資料夾，才能偵錯 npm 指令碼。</target>
      </trans-unit>
      <trans-unit id="debug.npm.parseError">
        <source xml:lang="en">Could not read {0}: {1}</source>
        <target state="translated">無法讀取 {0}: {1}</target>
      </trans-unit>
      <trans-unit id="debug.npm.script">
        <source xml:lang="en">Debug NPM Script</source>
        <target state="translated">偵錯 NPM 指令碼</target>
      </trans-unit>
      <trans-unit id="debug.terminal.label">
        <source xml:lang="en">Create JavaScript Debug Terminal</source>
        <target state="translated">建立 JavaScript 偵錯終端機</target>
      </trans-unit>
      <trans-unit id="debug.terminal.program.description">
        <source xml:lang="en">Command to run in the launched terminal. If not provided, the terminal will open without launching a program.</source>
        <target state="translated">要在啟動終端機執行的指令。如未提供，終端機將不會在開啟時啟動程式。</target>
      </trans-unit>
      <trans-unit id="debug.terminal.snippet.label">
        <source xml:lang="en">Run "npm start" in a debug terminal</source>
        <target state="translated">在偵錯終端機執行 "npm start"</target>
      </trans-unit>
      <trans-unit id="edge.attach.description">
        <source xml:lang="en">Attach to an instance of Edge already in debug mode</source>
        <target state="translated">附加至已經進入偵錯模式的 Microsoft Edge 執行個體</target>
      </trans-unit>
      <trans-unit id="edge.attach.label">
        <source xml:lang="en">Edge: Attach</source>
        <target state="translated">Microsoft Edge: 附加</target>
      </trans-unit>
      <trans-unit id="edge.label">
        <source xml:lang="en">Edge (preview)</source>
        <target state="translated">Microsoft Edge (預覽)</target>
      </trans-unit>
      <trans-unit id="edge.launch.description">
        <source xml:lang="en">Launch Edge to debug a URL</source>
        <target state="translated">啟動 Microsoft Edge 來偵錯 URL</target>
      </trans-unit>
      <trans-unit id="edge.launch.label">
        <source xml:lang="en">Edge: Launch</source>
        <target state="translated">Microsoft Edge: 啟動</target>
      </trans-unit>
      <trans-unit id="edge.useWebView.description">
        <source xml:lang="en">(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.</source>
        <target state="translated">(Microsoft Edge (Chromium) 專用) 為 'true' 時，偵錯工具會將執行階段可執行檔視為包含 WebView 的主機應用程式，以便您偵錯 WebView 指令碼內容。</target>
      </trans-unit>
      <trans-unit id="errors.timeout">
        <source xml:lang="en">{0}: timeout after {1}ms</source>
        <target state="translated">{0}: 經過 {1} 毫秒後逾時</target>
      </trans-unit>
      <trans-unit id="extension.description">
        <source xml:lang="en">An extension for debugging Node.js programs and Chrome.</source>
        <target state="translated">用於偵錯 Node.js 程式和 Chrome 的延伸模組。</target>
      </trans-unit>
      <trans-unit id="extensionHost.label">
        <source xml:lang="en">VS Code Extension Development (preview)</source>
        <target state="translated">VS Code 延伸模組開發 (預覽)</target>
      </trans-unit>
      <trans-unit id="extensionHost.launch.config.name">
        <source xml:lang="en">Launch Extension</source>
        <target state="translated">啟動延伸模組</target>
      </trans-unit>
      <trans-unit id="extensionHost.launch.env.description">
        <source xml:lang="en">Environment variables passed to the extension host.</source>
        <target state="translated">已將環境變數傳遞到延伸模組主機。</target>
      </trans-unit>
      <trans-unit id="extensionHost.launch.runtimeExecutable.description">
        <source xml:lang="en">Absolute path to VS Code.</source>
        <target state="translated">VS Code 的絕對路徑。</target>
      </trans-unit>
      <trans-unit id="extensionHost.launch.stopOnEntry.description">
        <source xml:lang="en">Automatically stop the extension host after launch.</source>
        <target state="translated">在啟動後自動停止延伸主機。</target>
      </trans-unit>
      <trans-unit id="extensionHost.snippet.launch.description">
        <source xml:lang="en">Launch a VS Code extension in debug mode</source>
        <target state="translated">在偵錯模式中啟動 VS Code 延伸模組</target>
      </trans-unit>
      <trans-unit id="extensionHost.snippet.launch.label">
        <source xml:lang="en">VS Code Extension Development</source>
        <target state="translated">VS Code 延伸模組開發</target>
      </trans-unit>
      <trans-unit id="longPredictionWarning.disable">
        <source xml:lang="en">Don't show again</source>
        <target state="translated">不要再顯示</target>
      </trans-unit>
      <trans-unit id="longPredictionWarning.message">
        <source xml:lang="en">It's taking a while to configure your breakpoints. You can speed this up by updating the 'outFiles' in your launch.json.</source>
        <target state="translated">設定中斷點需要一段時間。您可以透過更新 launch.json 中的 'outFiles' 來加快速度。</target>
      </trans-unit>
      <trans-unit id="longPredictionWarning.noFolder">
        <source xml:lang="en">No workspace folder open.</source>
        <target state="translated">未開啟工作區資料夾。</target>
      </trans-unit>
      <trans-unit id="longPredictionWarning.open">
        <source xml:lang="en">Open launch.json</source>
        <target state="translated">開啟 launch.json</target>
      </trans-unit>
      <trans-unit id="node.address.description">
        <source xml:lang="en">TCP/IP address of process to be debugged. Default is 'localhost'.</source>
        <target state="translated">要偵錯之處理序的 TCP/IP 位址。預設為 'localhost'。</target>
      </trans-unit>
      <trans-unit id="node.attach.attachExistingChildren.description">
        <source xml:lang="en">Whether to attempt to attach to already-spawned child processes.</source>
        <target state="translated">是否要嘗試附加至已衍生的子處理序。</target>
      </trans-unit>
      <trans-unit id="node.attach.attachSpawnedProcesses.description">
        <source xml:lang="en">Whether to set environment variables in the attached process to track spawned children.</source>
        <target state="translated">是否要在附加的處理序中設定環境變數，來追蹤繁衍的子系。</target>
      </trans-unit>
      <trans-unit id="node.attach.config.name">
        <source xml:lang="en">Attach</source>
        <target state="translated">附加</target>
      </trans-unit>
      <trans-unit id="node.attach.continueOnAttach">
        <source xml:lang="en">If true, we'll automatically resume programs launched and waiting on `--inspect-brk`</source>
        <target state="translated">如果為 true，我們會自動繼續啟動的程式並等待 `--inspect-brk`</target>
      </trans-unit>
      <trans-unit id="node.attach.processId.description">
        <source xml:lang="en">ID of process to attach to.</source>
        <target state="translated">要附加的處理序識別碼。</target>
      </trans-unit>
      <trans-unit id="node.attach.restart.description">
        <source xml:lang="en">Try to reconnect to the program if we lose connection.</source>
        <target state="translated">如果我們失去連線，請嘗試重新連線到程式。</target>
      </trans-unit>
      <trans-unit id="node.console.title">
        <source xml:lang="en">Node Debug Console</source>
        <target state="translated">節點偵錯主控台</target>
      </trans-unit>
      <trans-unit id="node.disableOptimisticBPs.description">
        <source xml:lang="en">Don't set breakpoints in any file until a sourcemap has been loaded for that file.</source>
        <target state="translated">在任何檔案載入 sourcemap 之前，不要在該檔案中設定中斷點。</target>
      </trans-unit>
      <trans-unit id="node.label">
        <source xml:lang="en">Node.js (preview)</source>
        <target state="translated">Node.js (預覽)</target>
      </trans-unit>
      <trans-unit id="node.launch.args.description">
        <source xml:lang="en">Command line arguments passed to the program.</source>
        <target state="translated">傳遞給程式的命令列引數。</target>
      </trans-unit>
      <trans-unit id="node.launch.autoAttachChildProcesses.description">
        <source xml:lang="en">Attach debugger to new child processes automatically.</source>
        <target state="translated">自動附加偵錯工具至新的子處理序。</target>
      </trans-unit>
      <trans-unit id="node.launch.config.name">
        <source xml:lang="en">Launch</source>
        <target state="translated">啟動</target>
      </trans-unit>
      <trans-unit id="node.launch.console.description">
        <source xml:lang="en">Where to launch the debug target.</source>
        <target state="translated">啟動偵錯目標的位置。</target>
      </trans-unit>
      <trans-unit id="node.launch.console.externalTerminal.description">
        <source xml:lang="en">External terminal that can be configured via user settings</source>
        <target state="translated">可透過使用者設定進行外部終端機的設定。</target>
      </trans-unit>
      <trans-unit id="node.launch.console.integratedTerminal.description">
        <source xml:lang="en">VS Code's integrated terminal</source>
        <target state="translated">VS Code 的整合式終端機</target>
      </trans-unit>
      <trans-unit id="node.launch.console.internalConsole.description">
        <source xml:lang="en">VS Code Debug Console (which doesn't support to read input from a program)</source>
        <target state="translated">VS Code 偵錯主控台 (無法從程式讀取輸入)</target>
      </trans-unit>
      <trans-unit id="node.launch.cwd.description">
        <source xml:lang="en">Absolute path to the working directory of the program being debugged.</source>
        <target state="translated">程式工作目錄的絕對路徑 (該程式正在進行偵錯)。</target>
      </trans-unit>
      <trans-unit id="node.launch.env.description">
        <source xml:lang="en">Environment variables passed to the program. The value `null` removes the variable from the environment.</source>
        <target state="translated">已將環境變數傳遞到程式。值 `null` 從環境變數中移除變數。</target>
      </trans-unit>
      <trans-unit id="node.launch.envFile.description">
        <source xml:lang="en">Absolute path to a file containing environment variable definitions.</source>
        <target state="translated">包含環境變數定義之檔案的絕對路徑。</target>
      </trans-unit>
      <trans-unit id="node.launch.logging">
        <source xml:lang="en">Logging configuration</source>
        <target state="translated">記錄組態</target>
      </trans-unit>
      <trans-unit id="node.launch.logging.cdp">
        <source xml:lang="en">Path to the log file for Chrome DevTools Protocol messages</source>
        <target state="translated">Chrome DevTools Protocol 訊息的記錄檔路徑</target>
      </trans-unit>
      <trans-unit id="node.launch.logging.dap">
        <source xml:lang="en">Path to the log file for Debug Adapter Protocol messages</source>
        <target state="translated">偵錯配接器通訊協定訊息的記錄檔路徑</target>
      </trans-unit>
      <trans-unit id="node.launch.outputCapture.description">
        <source xml:lang="en">From where to capture output messages: The debug API, or stdout/stderr streams.</source>
        <target state="translated">從該處擷取輸出訊息: 偵錯 API 或 StdOut/STDERR 資料流。</target>
      </trans-unit>
      <trans-unit id="node.launch.program.description">
        <source xml:lang="en">Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.</source>
        <target state="translated">程式的絕對路徑。透過查看 package.json 及開啟的檔案猜測產生的值。編輯此屬性。</target>
      </trans-unit>
      <trans-unit id="node.launch.restart.description">
        <source xml:lang="en">Try to restart the program if it exits with a non-zero exit code.</source>
        <target state="translated">如果程式以非零的結束代碼結束，請嘗試重新啟動程式。</target>
      </trans-unit>
      <trans-unit id="node.launch.runtimeArgs.description">
        <source xml:lang="en">Optional arguments passed to the runtime executable.</source>
        <target state="translated">傳遞給執行階段可執行檔的選擇性引數。</target>
      </trans-unit>
      <trans-unit id="node.launch.runtimeExecutable.description">
        <source xml:lang="en">Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.</source>
        <target state="translated">要使用的執行階段。可以是 PATH 上可用執行階段的絕對路徑或名稱。若省略，即假設為 `node`。</target>
      </trans-unit>
      <trans-unit id="node.launch.runtimeVersion.description">
        <source xml:lang="en">Version of `node` runtime to use. Requires `nvm`.</source>
        <target state="translated">'node' 版本的執行階段使用中。需要 `nvm`。</target>
      </trans-unit>
      <trans-unit id="node.launch.useWSL.deprecation">
        <source xml:lang="en">'useWSL' is deprecated and support for it will be dropped. Use the 'Remote - WSL' extension instead.</source>
        <target state="translated">'useWSL' 已淘汰且其支援將受到捨棄。請改為使用 'Remote - WSL' 延伸模組。</target>
      </trans-unit>
      <trans-unit id="node.launch.useWSL.description">
        <source xml:lang="en">Use Windows Subsystem for Linux.</source>
        <target state="translated">使用 Windows 子系統 Linux 版。</target>
      </trans-unit>
      <trans-unit id="node.localRoot.description">
        <source xml:lang="en">Path to the local directory containing the program.</source>
        <target state="translated">包含程式的本機目錄路徑。</target>
      </trans-unit>
      <trans-unit id="node.pauseForSourceMap.description">
        <source xml:lang="en">Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.</source>
        <target state="translated">是否要等待各個連入指令碼的來源對應載入。這會有效能額外負荷，且只要未停用 `rootPath`，就能在磁碟上執行時安全停用。</target>
      </trans-unit>
      <trans-unit id="node.port.description">
        <source xml:lang="en">Debug port to attach to. Default is 5858.</source>
        <target state="translated">要附加到的目標偵錯連接埠。預設值為 5858。</target>
      </trans-unit>
      <trans-unit id="node.processattach.config.name">
        <source xml:lang="en">Attach to Process</source>
        <target state="translated">附加至處理序</target>
      </trans-unit>
      <trans-unit id="node.remoteRoot.description">
        <source xml:lang="en">Absolute path to the remote directory containing the program.</source>
        <target state="translated">包含程式的遠端目錄絕對路徑。</target>
      </trans-unit>
      <trans-unit id="node.resolveSourceMapLocations.description">
        <source xml:lang="en">A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with "!" to exclude them. May be set to an empty array or null to avoid restriction.</source>
        <target state="translated">位置 (資料夾和 URL) 的 minimatch 模式清單，其中來源對應可用於解析本機檔案。您可以利用此清單來避免外部來源對應程式碼中出現錯誤分行。在模式名稱開頭加上 "!" 可予以排除。可設定為空白陣列或 null 來避免限制。</target>
      </trans-unit>
      <trans-unit id="node.showAsyncStacks.description">
        <source xml:lang="en">Show the async calls that led to the current call stack.</source>
        <target state="translated">顯示導致目前呼叫堆疊的非同步呼叫。</target>
      </trans-unit>
      <trans-unit id="node.snippet.attach.description">
        <source xml:lang="en">Attach to a running node program</source>
        <target state="translated">附加至Node處理程序</target>
      </trans-unit>
      <trans-unit id="node.snippet.attach.label">
        <source xml:lang="en">Node.js: Attach</source>
        <target state="translated">Node.js: 附加</target>
      </trans-unit>
      <trans-unit id="node.snippet.attachProcess.description">
        <source xml:lang="en">Open process picker to select node process to attach to</source>
        <target state="translated">開啟處理序選擇器以選取要連結的目標節點處理序</target>
      </trans-unit>
      <trans-unit id="node.snippet.attachProcess.label">
        <source xml:lang="en">Node.js: Attach to Process</source>
        <target state="translated">Node.js: 連結到處理序</target>
      </trans-unit>
      <trans-unit id="node.snippet.electron.description">
        <source xml:lang="en">Debug the Electron main process</source>
        <target state="translated">對 Electron 主要處理序偵錯</target>
      </trans-unit>
      <trans-unit id="node.snippet.electron.label">
        <source xml:lang="en">Node.js: Electron Main</source>
        <target state="translated">Node.js: Electron 主要</target>
      </trans-unit>
      <trans-unit id="node.snippet.gulp.description">
        <source xml:lang="en">Debug gulp task (make sure to have a local gulp installed in your project)</source>
        <target state="translated">對 Gulp 工作偵錯 (確認您的專案中已安裝本機 Gulp)</target>
      </trans-unit>
      <trans-unit id="node.snippet.gulp.label">
        <source xml:lang="en">Node.js: Gulp task</source>
        <target state="translated">Node.js: Gulp 工作</target>
      </trans-unit>
      <trans-unit id="node.snippet.launch.description">
        <source xml:lang="en">Launch a node program in debug mode</source>
        <target state="translated">在偵錯模式中啟動節點程式</target>
      </trans-unit>
      <trans-unit id="node.snippet.launch.label">
        <source xml:lang="en">Node.js: Launch Program</source>
        <target state="translated">Node.js: 啟動程式</target>
      </trans-unit>
      <trans-unit id="node.snippet.mocha.description">
        <source xml:lang="en">Debug mocha tests</source>
        <target state="translated">對 mocha 測試偵錯</target>
      </trans-unit>
      <trans-unit id="node.snippet.mocha.label">
        <source xml:lang="en">Node.js: Mocha Tests</source>
        <target state="translated">Node.js: Mocha 測試</target>
      </trans-unit>
      <trans-unit id="node.snippet.nodemon.description">
        <source xml:lang="en">Use nodemon to relaunch a debug session on source changes</source>
        <target state="translated">使用 nodemon 在來源變更時重新啟動偵錯工作階段</target>
      </trans-unit>
      <trans-unit id="node.snippet.nodemon.label">
        <source xml:lang="en">Node.js: Nodemon Setup</source>
        <target state="translated">Node.js: Nodemon 設定</target>
      </trans-unit>
      <trans-unit id="node.snippet.npm.description">
        <source xml:lang="en">Launch a node program through an npm `debug` script</source>
        <target state="translated">透過 npm `debug` 指令碼啟動節點程式</target>
      </trans-unit>
      <trans-unit id="node.snippet.npm.label">
        <source xml:lang="en">Node.js: Launch via NPM</source>
        <target state="translated">Node.js: 透過 NPM 啟動</target>
      </trans-unit>
      <trans-unit id="node.snippet.remoteattach.description">
        <source xml:lang="en">Attach to the debug port of a remote node program</source>
        <target state="translated">附加到遠端節點程式的偵錯連接埠</target>
      </trans-unit>
      <trans-unit id="node.snippet.remoteattach.label">
        <source xml:lang="en">Node.js: Attach to Remote Program</source>
        <target state="translated">Node.js: 附加到遠端程式</target>
      </trans-unit>
      <trans-unit id="node.snippet.yo.description">
        <source xml:lang="en">Debug yeoman generator (install by running `npm link` in project folder)</source>
        <target state="translated">偵錯 Yeoman 產生器 (透過執行專案資料夾中的 `npm link` 進行安裝)</target>
      </trans-unit>
      <trans-unit id="node.snippet.yo.label">
        <source xml:lang="en">Node.js: Yeoman generator</source>
        <target state="translated">Node.js: Yeoman 產生器</target>
      </trans-unit>
      <trans-unit id="node.sourceMapPathOverrides.description">
        <source xml:lang="en">A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.</source>
        <target state="translated">依據 sourcemap 指示重新寫入一組來源檔案位置對應至磁碟上的位置。</target>
      </trans-unit>
      <trans-unit id="node.sourceMaps.description">
        <source xml:lang="en">Use JavaScript source maps (if they exist).</source>
        <target state="translated">使用 JavaScript 來源對應 (如果存在)。</target>
      </trans-unit>
      <trans-unit id="node.stopOnEntry.description">
        <source xml:lang="en">Automatically stop program after launch.</source>
        <target state="translated">在啟動後自動停止程式。</target>
      </trans-unit>
      <trans-unit id="node.timeout.description">
        <source xml:lang="en">Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.</source>
        <target state="translated">重試連接到 Node.js 前要等待的毫秒數。預設值為 10000 毫秒。</target>
      </trans-unit>
      <trans-unit id="outFiles.description">
        <source xml:lang="en">If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.</source>
        <target state="translated">若已啟用來源對應，這些 Glob 模式會指定所產生的 JavaScript 檔案。若模式開頭為 `!`，會排除檔案。若未指定，所產生的程式碼應在與來源相同的目錄中。</target>
      </trans-unit>
      <trans-unit id="pretty.print.script">
        <source xml:lang="en">Pretty print for debugging</source>
        <target state="translated">偵錯的美化顯示</target>
      </trans-unit>
      <trans-unit id="remove.browser.breakpoint">
        <source xml:lang="en">Remove Browser Breakpoint</source>
        <target state="translated">移除瀏覽器中斷點</target>
      </trans-unit>
      <trans-unit id="remove.browser.breakpoint.all">
        <source xml:lang="en">Remove All Browser Breakpoints</source>
        <target state="translated">刪除所有瀏覽器中斷點</target>
      </trans-unit>
      <trans-unit id="skipFiles.description">
        <source xml:lang="en">An array of glob patterns for files to skip when debugging. The pattern `&lt;node_internals&gt;/**` matches all internal Node.js modules.</source>
        <target state="translated">偵錯時要跳過的檔案 Glob 模式陣列。該模式 `&lt;node_internals&gt;/**` 會比對所有內部 Node.js 模組。</target>
      </trans-unit>
      <trans-unit id="smartStep.description">
        <source xml:lang="en">Automatically step through generated code that cannot be mapped back to the original source.</source>
        <target state="translated">自動逐步所執行產生無法對應回原始碼的程式碼。</target>
      </trans-unit>
      <trans-unit id="start.with.stop.on.entry">
        <source xml:lang="en">Start Debugging and Stop on Entry</source>
        <target state="translated">啟動偵錯並停止在進入點</target>
      </trans-unit>
      <trans-unit id="toggle.skipping.this.file">
        <source xml:lang="en">Toggle Skipping this File</source>
        <target state="translated">略過此檔案</target>
      </trans-unit>
      <trans-unit id="trace.boolean.description">
        <source xml:lang="en">Trace may be set to 'true' to write diagnostic logs to the disk.</source>
        <target state="translated">追蹤可設為 'true' 來將診斷記錄寫入磁碟。</target>
      </trans-unit>
      <trans-unit id="trace.console.description">
        <source xml:lang="en">Configures whether logs are also returned to the debug console.</source>
        <target state="translated">設定記錄是否會一併傳回偵錯主控台。</target>
      </trans-unit>
      <trans-unit id="trace.description">
        <source xml:lang="en">Configures what diagnostic output is produced.</source>
        <target state="translated">設定產生的診斷輸出。</target>
      </trans-unit>
      <trans-unit id="trace.level.description">
        <source xml:lang="en">Configures the level of logs recorded.</source>
        <target state="translated">設定記錄的記錄層級。</target>
      </trans-unit>
      <trans-unit id="trace.logFile.description">
        <source xml:lang="en">Configures where on disk logs are written.</source>
        <target state="translated">設定要寫入磁碟記錄的位置。</target>
      </trans-unit>
      <trans-unit id="trace.tags.description">
        <source xml:lang="en">Configures what types of logs are recorded.</source>
        <target state="translated">設定要記錄的記錄類型。</target>
      </trans-unit>
    </body>
  </file>
</xliff>